fn run(codes : List[String]) -> String {
  fn parse_then_compile(code : String) -> (String, Int, List[Instruction]) {
    let tokens = tokenize(code)
    let code = 
      try {
        tokens.parse_sc!()
      } catch {
        ParseError(s) => abort(s)
      } else {
        expr => expr
      }
    let code = compileSC(code)
    return code
  }
  let codes = codes.map(parse_then_compile) + prelude_defs.map(compileSC)
  let codes = compiled_primitives + codes
  let (heap, globals) = build_initial_heap(codes)
  let initialState : GState = {
    output : @buffer.new(size_hint = 60),
    heap : heap,
    stack : Nil,
    // start init definition
    code : List::of([PushGlobal("main"), Eval, Print]),
    // end init definition
    globals : globals,
    stats : 0,
    dump : Nil
  }
  initialState.reify()
}


test "basic eval" {
  let basic = []
  for kv in programs.iter() {
    let (_, v) = kv
    basic.push(v)
  }
  let basic = List::from_array(basic)
  
  let main = "(defn main[] (take 20 fibs))"
  inspect!(run(Cons(main, basic)), content = "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 Nil")
}