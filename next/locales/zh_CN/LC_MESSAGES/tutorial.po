# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, International Digital Economy Academy
# This file is distributed under the same license as the MoonBit Document
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MoonBit Document \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-20 16:37+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../tutorial/index.md:7
msgid "Contents:"
msgstr ""

#: ../../tutorial/index.md:1
msgid "Tutorial"
msgstr ""

#: ../../tutorial/index.md:3
msgid "Here are some tutorials that may help you learn the programming language:"
msgstr ""

#: ../../tutorial/index.md:5
msgid "[Tour](./tour.md)"
msgstr ""

#: ../../tutorial/tour.md:1
msgid "A Tour of MoonBit for Beginners"
msgstr ""

#: ../../tutorial/tour.md:3
msgid ""
"This guide is intended for newcomers, and it's not meant to be a 5-minute"
" quick tour. This article tries to be a succinct yet easy to understand "
"guide for those who haven't programmed in a way that MoonBit enables them"
" to, that is, in a more modern, functional way."
msgstr ""

#: ../../tutorial/tour.md:6
msgid ""
"See [the General Introduction](./README.md) if you want to straight delve"
" into the language."
msgstr ""

#: ../../tutorial/tour.md:8
msgid "Installation"
msgstr ""

#: ../../tutorial/tour.md:10
msgid "the Extension"
msgstr ""

#: ../../tutorial/tour.md:12
msgid ""
"Currently, MoonBit development support are through VS Code extension. "
"Navigate to [VS Code "
"Marketplace](https://marketplace.visualstudio.com/items?itemName=moonbit"
".moonbit-lang) to download MoonBit language support."
msgstr ""

#: ../../tutorial/tour.md:15
msgid "the toolchain"
msgstr ""

#: ../../tutorial/tour.md:17
msgid ""
"(Recommended) If you've installed the extension above, the runtime can be"
" directly installed by running 'Install moonbit toolchain' in the action "
"menu and you may skip this part: ![runtime-installation](./imgs/runtime-"
"installation.png)"
msgstr ""

#: ../../tutorial/tour.md:17
msgid "runtime-installation"
msgstr ""

#: ../../tutorial/tour.md:20
msgid ""
"We also provide an installation script: Linux & macOS users can install "
"via"
msgstr ""

#: ../../tutorial/tour.md:26
msgid "For Windows users, powershell is used:"
msgstr ""

#: ../../tutorial/tour.md:32
msgid ""
"This automatically installs MoonBit in `$HOME/.moon` and adds it to your "
"`PATH`."
msgstr ""

#: ../../tutorial/tour.md:34
msgid ""
"If you encounter `moon` not found after installation, try restarting your"
" terminal or vscode to let the environment variable take effect."
msgstr ""

#: ../../tutorial/tour.md:36
msgid ""
"Do notice that MoonBit is not production-ready at the moment, it's under "
"active development. To update MoonBit, just run the commands above again."
msgstr ""

#: ../../tutorial/tour.md:38
msgid ""
"Running `moon help` gives us a bunch of subcommands. But right now the "
"only commands we need are `build` `run` and `new`."
msgstr ""

#: ../../tutorial/tour.md:40
msgid ""
"To create a project (or module, more formally), run `moon new`. You will "
"be greeted with a creation wizard, filling up all the info and we get"
msgstr ""

#: ../../tutorial/tour.md:57
msgid ""
"This resembles a typical MoonBit module structure. Try running `moon run "
"src/main`."
msgstr ""

#: ../../tutorial/tour.md:59
msgid "Now, we can get started."
msgstr ""

#: ../../tutorial/tour.md:61
msgid "Start Writing"
msgstr ""

#: ../../tutorial/tour.md:63
msgid ""
"In our tour, we will write all of the codes below in `main.mbt`. As you "
"may have guessed, the `main` function within the `main` package is the "
"main entrance of a program. For a thorough introduction, please take a "
"look at our [build system tutorial](https://www.moonbitlang.com/docs"
"/build-system-tutorial)."
msgstr ""

#: ../../tutorial/tour.md:66
msgid "Variables"
msgstr ""

#: ../../tutorial/tour.md:68
msgid "Variables are defined with `let`:"
msgstr ""

#: ../../tutorial/tour.md:87
msgid ""
"MoonBit is a strictly typed language with type inference. In the example "
"above, `let` binds (we prefer the word _bind_ to assign) a symbol to a "
"value. The symbol is inferred to have the same type as the value. Hover "
"over any of the symbols to check its type."
msgstr ""

#: ../../tutorial/tour.md:91
msgid ""
"By default, the `let` - binding creates an immutable reference to a "
"value. That is, you cannot change the symbol to reference something else "
"without rebinding it (using `let`). Otherwise one should use `let mut`."
msgstr ""

#: ../../tutorial/tour.md:93
msgid "Function"
msgstr ""

#: ../../tutorial/tour.md:95
msgid ""
"Function is just a piece of code that takes some inputs and produce a "
"result. We may define a function using the keyword `fn` (function name in"
" MoonBit should not begin with uppercase letters A-Z):"
msgstr ""

#: ../../tutorial/tour.md:104
msgid ""
"In this example, we provide types explicitly. Notice how it differs from "
"traditional C-like languages which uses prefix type notation `T x`, here "
"we use postfix type notation `x: T` (Formally, we call it _type "
"annotation_)."
msgstr ""

#: ../../tutorial/tour.md:107
msgid ""
"We write a arrow `->` before the return type to show the nature of a "
"function: a map from some types to some other types. Formally, we call "
"this syntax _trailing return type_ (languages such as C++, Rust, Swift, "
"etc have this syntax as well)."
msgstr ""

#: ../../tutorial/tour.md:109
msgid ""
"The word _expression_ is loosely used. Intuitively, An expression is "
"something with a value we care about."
msgstr ""

#: ../../tutorial/tour.md:111
msgid ""
"Consequently, a function type is denoted `(S) -> T` where `S` (within "
"parenthesis) is the parameter type and `T` is the return type. Functions "
"in MoonBit are first-class, meaning it's always possible to pass "
"functions around if you get the type right:"
msgstr ""

#: ../../tutorial/tour.md:125
msgid ""
"Languages nowadays have something called _lambda expression_. Most "
"languages implement it as a mere syntactic sugar. A lambda expression is "
"really just a anonymous closure, this, is resembled in our MoonBit's "
"syntax:"
msgstr ""

#: ../../tutorial/tour.md:127
msgid ""
"a closure only captures variables in its surroundings, together with its "
"bound variable, that is, having the same indentation level (suppose we've"
" formatted the code already)."
msgstr ""

#: ../../tutorial/tour.md:141
msgid "Now we've learned the very basic, let's learn the rest by coding."
msgstr ""

#: ../../tutorial/tour.md:143
msgid "Implementing List"
msgstr ""

#: ../../tutorial/tour.md:145
msgid "enum type"
msgstr ""

#: ../../tutorial/tour.md:147
msgid ""
"A linked list is a series of node whose right cell is a reference to its "
"successor node. Sounds recursive? Because it is. Let's define it that way"
" using MoonBit:"
msgstr ""

#: ../../tutorial/tour.md:156
msgid ""
"The `enum` type works like any `enum` from traditional OO languages. "
"However, let's refrain from using the OO-term `case`, we'll use "
"_constructor_ from now on. We may read the above code as"
msgstr ""

#: ../../tutorial/tour.md:158
msgid ""
"the type `List[T]` can be constructed from the constructor `Nil` or "
"`Cons`, the former represents an empty list; the latter carries some data"
" of type `T` and the rest of the list."
msgstr ""

#: ../../tutorial/tour.md:160
msgid ""
"The square bracket used here denotes a _polymorphic_ (generic) "
"definition, meaning a list of something of type `T`. Should we "
"_instantiate_ `T` with a concrete type like `Int`, we define a list "
"containing integers."
msgstr ""

#: ../../tutorial/tour.md:162
msgid ""
"Another datatype frequently used in MoonBit is our good old `Struct`, "
"which works like you would expect. Let's create a list of `User` using "
"the definition above and `Struct`:"
msgstr ""

#: ../../tutorial/tour.md:189
msgid ""
"Another datatype is `type`, a specific case of `enum` type. `type` can be"
" thought as a wrapper around an existing type, keeping the methods of "
"`String` but allows additional methods to be defined. Through this we "
"extends the method definition of a foreign type without actually "
"modifying it. Consider the type of `name` in `User`, we may define it as"
msgstr ""

#: ../../tutorial/tour.md:215
msgid ""
"`enum`, `struct` and `newtype` are the 3 ways to define a datatype. There"
" isn't `class` in MoonBit, nor does it need that."
msgstr ""

#: ../../tutorial/tour.md:218
msgid ""
"the `derive` keyword is like Java's `implements`. Here `Show` is a "
"_trait_ which indicates a type is printable. So what is a trait?"
msgstr ""

#: ../../tutorial/tour.md:221
msgid "Trait"
msgstr ""

#: ../../tutorial/tour.md:223
msgid ""
"A trait (or type trait) is what we would call an `interface` in "
"traditional OO-languages. `println(evan)` would print `{id: 0, name: "
"\"Evan\", email: \"someone@example.com\"}`. As `User` consists of builtin"
" types `Int` `String`, which already implements `Show`. Therefore we do "
"not need to implement it explicitly. Let's implement our own trait "
"`Printable` by implementing `to_string()`:"
msgstr ""

#: ../../tutorial/tour.md:258
msgid ""
"We use `<T extends Printable>` in Java to constrain the type of list "
"element to make sure objects of type `T` can be printed, similarly, in "
"MoonBit we would write `[T: Printable]`."
msgstr ""

#: ../../tutorial/tour.md:261
msgid "Pattern Matching"
msgstr ""

#: ../../tutorial/tour.md:263
msgid ""
"In the example above we use the `match` expression, a core feature of "
"MoonBit (and many other functional programming languages.) In short, we "
"use pattern matching to _destructure_ (to strip the encapsulation of) a "
"structure."
msgstr ""

#: ../../tutorial/tour.md:267
msgid "We may express the above `match` code as"
msgstr ""

#: ../../tutorial/tour.md:269
msgid ""
"if `self` is constructed with `Nil` (an empty list), we return `\"\"`; "
"otherwise if `self` is constructed with `Cons(x,xs)` (a non-empty list) "
"we print `x` and rest of the list. Where `x` is the head of the `self` "
"and `xs` being the rest."
msgstr ""

#: ../../tutorial/tour.md:274
msgid ""
"Intuitively, we extract `x` and `xs` (they are bound in situ) from `self`"
" using pattern matching. Let's implement typical list operations such as "
"`map` `reduce` `zip`:"
msgstr ""

#: ../../tutorial/tour.md:301
msgid ""
"Now we have a somewhat usable `List` type. Realistically, we always "
"prefer the builtin `Array` which is much more efficient."
msgstr ""

#: ../../tutorial/tour.md:304
msgid ""
"Pattern matching can be used in `let` as well. In `greetUser()`, instead "
"of writing 2 `let`'s, we may write"
msgstr ""

#: ../../tutorial/tour.md:317
msgid "Iteration"
msgstr ""

#: ../../tutorial/tour.md:319
msgid ""
"Finally, let's talk about the major point of every OO-language: looping. "
"Although we've been using recursion most of the times, MoonBit is "
"designed to be multi-paradigm, thus it retains C-style imperative `for` "
"`while` loop."
msgstr ""

#: ../../tutorial/tour.md:324
msgid ""
"Additionally, MoonBit provides a more interesting loop construct, the "
"functional loop. For example the Fibonacci number can be calculated by"
msgstr ""

#: ../../tutorial/tour.md:342
msgid ""
"Semantic-wise, the `loop` construct focuses more on the transition of "
"each state, providing better readability, preserving recursive flavor and"
" same performance without writing [tail-"
"recursion](https://en.wikipedia.org/wiki/Tail_call) explicitly."
msgstr ""

#: ../../tutorial/tour.md:345
msgid "Closing"
msgstr ""

#: ../../tutorial/tour.md:347
msgid ""
"At this point, we've learned about the very basic and most not-so-trivial"
" features of MoonBit, yet MoonBit is a feature-rich, multi-paradigm "
"programming language. After making sure that you are comfortable with the"
" basics of MoonBit, we suggest that you look into some [interesting "
"examples](https://www.moonbitlang.com/docs/category/examples) to get a "
"better hold of MoonBit."
msgstr ""

