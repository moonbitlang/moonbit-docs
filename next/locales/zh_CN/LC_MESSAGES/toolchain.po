# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, International Digital Economy Academy
# This file is distributed under the same license as the MoonBit Document
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
msgid ""
msgstr ""
"Project-Id-Version: MoonBit Document \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-14 10:32+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../toolchain/index.md:15 ../../toolchain/moon/index.md:3
msgid "Contents:"
msgstr "内容："

#: ../../toolchain/index.md:1
msgid "Toolchains"
msgstr "工具链"

#: ../../toolchain/index.md:3
msgid ""
"[MoonBit's Build System](./moon/index.md): full manual of `moon` build "
"system."
msgstr "[MoonBit 的构建系统](./moon/index.md)：`moon`构建系统的完整手册。"

#: ../../toolchain/index.md:4
msgid "[MoonBit's VSCode Plugin](./vscode/index.md): hint on VSCode plugin."
msgstr "[MoonBit 的 VSCode 插件](./vscode/index.md)：关于 VSCode 插件的提示。"

#: ../../toolchain/index.md:6
msgid "**Other toolchains**"
msgstr "其他工具链"

#: ../../toolchain/index.md:8
msgid "[WebAssembly Toolchain](./wasm/index.md): how to use Wasm with MoonBit."
msgstr "[WebAssembly 工具链](./wasm/index.md)：如何在 MoonBit 中使用 Wasm。"

#: ../../toolchain/index.md:9
msgid "..."
msgstr ""

#: ../../toolchain/index.md:12
msgid "[Download this section in Markdown](path:/download/toolchain/summary.md)"
msgstr "[下载本章节的 Markdown 版本](path:/download/toolchain/summary.md)"

#: ../../toolchain/moon/commands.md:1
msgid "Command-Line Help for `moon`"
msgstr "`moon`的命令行帮助"

#: ../../toolchain/moon/commands.md:3
msgid ""
"This document contains the help content for the `moon` command-line "
"program."
msgstr "本文档包含`moon`命令行程序的帮助内容。"

#: ../../toolchain/moon/commands.md:6
msgid ""
"For the up-to-date manual, please check out [moon's "
"repository](https://github.com/moonbitlang/moon/blob/main/docs/manual/src/commands.md)"
msgstr ""
"要获取最新的手册，请查看 [moon "
"的仓库](https://github.com/moonbitlang/moon/blob/main/docs/manual/src/commands.md)"

#: ../../toolchain/moon/commands.md:9
msgid "**Command Overview:**"
msgstr "**命令概述：**"

#: ../../toolchain/moon/commands.md:11
msgid "[`moon`↴](#moon)"
msgstr ""

#: ../../toolchain/moon/commands.md:12
msgid "[`moon new`↴](#moon-new)"
msgstr ""

#: ../../toolchain/moon/commands.md:13
msgid "[`moon build`↴](#moon-build)"
msgstr ""

#: ../../toolchain/moon/commands.md:14
msgid "[`moon check`↴](#moon-check)"
msgstr ""

#: ../../toolchain/moon/commands.md:15
msgid "[`moon run`↴](#moon-run)"
msgstr ""

#: ../../toolchain/moon/commands.md:16
msgid "[`moon test`↴](#moon-test)"
msgstr ""

#: ../../toolchain/moon/commands.md:17
msgid "[`moon clean`↴](#moon-clean)"
msgstr ""

#: ../../toolchain/moon/commands.md:18
msgid "[`moon fmt`↴](#moon-fmt)"
msgstr ""

#: ../../toolchain/moon/commands.md:19
msgid "[`moon doc`↴](#moon-doc)"
msgstr ""

#: ../../toolchain/moon/commands.md:20
msgid "[`moon info`↴](#moon-info)"
msgstr ""

#: ../../toolchain/moon/commands.md:21
msgid "[`moon bench`↴](#moon-bench)"
msgstr ""

#: ../../toolchain/moon/commands.md:22
msgid "[`moon add`↴](#moon-add)"
msgstr ""

#: ../../toolchain/moon/commands.md:23
msgid "[`moon remove`↴](#moon-remove)"
msgstr ""

#: ../../toolchain/moon/commands.md:24
msgid "[`moon install`↴](#moon-install)"
msgstr ""

#: ../../toolchain/moon/commands.md:25
msgid "[`moon tree`↴](#moon-tree)"
msgstr ""

#: ../../toolchain/moon/commands.md:26
msgid "[`moon login`↴](#moon-login)"
msgstr ""

#: ../../toolchain/moon/commands.md:27
msgid "[`moon register`↴](#moon-register)"
msgstr ""

#: ../../toolchain/moon/commands.md:28
msgid "[`moon publish`↴](#moon-publish)"
msgstr ""

#: ../../toolchain/moon/commands.md:29
msgid "[`moon package`↴](#moon-package)"
msgstr ""

#: ../../toolchain/moon/commands.md:30
msgid "[`moon update`↴](#moon-update)"
msgstr ""

#: ../../toolchain/moon/commands.md:31
msgid "[`moon coverage`↴](#moon-coverage)"
msgstr ""

#: ../../toolchain/moon/commands.md:32
msgid "[`moon coverage analyze`↴](#moon-coverage-analyze)"
msgstr ""

#: ../../toolchain/moon/commands.md:33
msgid "[`moon coverage report`↴](#moon-coverage-report)"
msgstr ""

#: ../../toolchain/moon/commands.md:34
msgid "[`moon coverage clean`↴](#moon-coverage-clean)"
msgstr ""

#: ../../toolchain/moon/commands.md:35
msgid "[`moon generate-build-matrix`↴](#moon-generate-build-matrix)"
msgstr ""

#: ../../toolchain/moon/commands.md:36
msgid "[`moon upgrade`↴](#moon-upgrade)"
msgstr ""

#: ../../toolchain/moon/commands.md:37
msgid "[`moon shell-completion`↴](#moon-shell-completion)"
msgstr ""

#: ../../toolchain/moon/commands.md:38
msgid "[`moon version`↴](#moon-version)"
msgstr ""

#: ../../toolchain/moon/commands.md:40
msgid "`moon`"
msgstr ""

#: ../../toolchain/moon/commands.md:42
msgid "**Usage:** `moon <COMMAND>`"
msgstr "**用法：** `moon <命令>`"

#: ../../toolchain/moon/commands.md:44 ../../toolchain/moon/commands.md:474
msgid "**Subcommands:**"
msgstr "**子命令：**"

#: ../../toolchain/moon/commands.md:46
msgid "`new` — Create a new MoonBit module"
msgstr "`new` — 创建一个新的 MoonBit 模块"

#: ../../toolchain/moon/commands.md:47
msgid "`build` — Build the current package"
msgstr "`build` — 构建当前包"

#: ../../toolchain/moon/commands.md:48
msgid "`check` — Check the current package, but don't build object files"
msgstr "`check` — 检查当前包，但不构建对象文件"

#: ../../toolchain/moon/commands.md:49
msgid "`run` — Run a main package"
msgstr "`run` — 运行一个 main 包"

#: ../../toolchain/moon/commands.md:50
msgid "`test` — Test the current package"
msgstr "`test` — 测试当前包"

#: ../../toolchain/moon/commands.md:51
msgid "`clean` — Remove the target directory"
msgstr "`clean` — 删除 target 目录"

#: ../../toolchain/moon/commands.md:52
msgid "`fmt` — Format source code"
msgstr "`fmt` — 格式化源代码"

#: ../../toolchain/moon/commands.md:53
msgid "`doc` — Generate documentation"
msgstr "`doc` — 生成文档"

#: ../../toolchain/moon/commands.md:54
msgid ""
"`info` — Generate public interface (`.mbti`) files for all packages in "
"the module"
msgstr "`info` — 为模块中的所有包生成公共接口（`.mbti`）文件"

#: ../../toolchain/moon/commands.md:55
msgid "`bench` — Run benchmarks in the current package"
msgstr "`bench` — 对当前包运行基准测试"

#: ../../toolchain/moon/commands.md:56
msgid "`add` — Add a dependency"
msgstr "`add` — 添加一个依赖"

#: ../../toolchain/moon/commands.md:57
msgid "`remove` — Remove a dependency"
msgstr "`remove` — 移除一个依赖"

#: ../../toolchain/moon/commands.md:58
msgid "`install` — Install dependencies"
msgstr "`install` — 安装依赖"

#: ../../toolchain/moon/commands.md:59
msgid "`tree` — Display the dependency tree"
msgstr "`tree` — 显示依赖树"

#: ../../toolchain/moon/commands.md:60
msgid "`login` — Log in to your account"
msgstr "`login` — 登录到您的账户"

#: ../../toolchain/moon/commands.md:61
msgid "`register` — Register an account at mooncakes.io"
msgstr "`register` — 在 mooncakes.io 注册一个账户"

#: ../../toolchain/moon/commands.md:62
msgid "`publish` — Publish the current module"
msgstr "`publish` — 发布当前模块"

#: ../../toolchain/moon/commands.md:63
msgid "`package` — Package the current module"
msgstr "`package` — 打包当前模块"

#: ../../toolchain/moon/commands.md:64
msgid "`update` — Update the package registry index"
msgstr "`update` — 更新包注册表索引"

#: ../../toolchain/moon/commands.md:65
msgid "`coverage` — Code coverage utilities"
msgstr "`coverage` — 代码覆盖率工具"

#: ../../toolchain/moon/commands.md:66
msgid ""
"`generate-build-matrix` — Generate build matrix for benchmarking (legacy "
"feature)"
msgstr "`generate-build-matrix` — 生成用于基准测试的构建矩阵（遗留功能）"

#: ../../toolchain/moon/commands.md:67
msgid "`upgrade` — Upgrade toolchains"
msgstr "`upgrade` — 升级工具链"

#: ../../toolchain/moon/commands.md:68
msgid ""
"`shell-completion` — Generate shell completion for "
"bash/elvish/fish/pwsh/zsh to stdout"
msgstr "`shell-completion` — 为 bash/elvish/fish/pwsh/zsh 生成 shell 补全并输出到标准输出"

#: ../../toolchain/moon/commands.md:69
msgid "`version` — Print version information and exit"
msgstr "`version` — 打印版本信息并退出"

#: ../../toolchain/moon/commands.md:73
msgid "`moon new`"
msgstr ""

#: ../../toolchain/moon/commands.md:75
msgid "Create a new MoonBit module"
msgstr "创建一个新的 MoonBit 模块"

#: ../../toolchain/moon/commands.md:77
msgid "**Usage:** `moon new [OPTIONS] <PATH>`"
msgstr "**用法：** `moon new [选项] <路径>`"

#: ../../toolchain/moon/commands.md:79 ../../toolchain/moon/commands.md:133
#: ../../toolchain/moon/commands.md:179 ../../toolchain/moon/commands.md:221
#: ../../toolchain/moon/commands.md:282 ../../toolchain/moon/commands.md:381
#: ../../toolchain/moon/commands.md:397 ../../toolchain/moon/commands.md:488
#: ../../toolchain/moon/commands.md:504
msgid "**Arguments:**"
msgstr "**参数：**"

#: ../../toolchain/moon/commands.md:81
msgid "`<PATH>` — The path of the new project"
msgstr "`<PATH>` — 新项目的路径"

#: ../../toolchain/moon/commands.md:83 ../../toolchain/moon/commands.md:96
#: ../../toolchain/moon/commands.md:137 ../../toolchain/moon/commands.md:184
#: ../../toolchain/moon/commands.md:225 ../../toolchain/moon/commands.md:286
#: ../../toolchain/moon/commands.md:303 ../../toolchain/moon/commands.md:322
#: ../../toolchain/moon/commands.md:340 ../../toolchain/moon/commands.md:385
#: ../../toolchain/moon/commands.md:441 ../../toolchain/moon/commands.md:453
#: ../../toolchain/moon/commands.md:492 ../../toolchain/moon/commands.md:508
#: ../../toolchain/moon/commands.md:528 ../../toolchain/moon/commands.md:545
#: ../../toolchain/moon/commands.md:691 ../../toolchain/moon/commands.md:708
msgid "**Options:**"
msgstr "**选项：**"

#: ../../toolchain/moon/commands.md:85
msgid ""
"`--user <USER>` — The username of the module. Default to the logged-in "
"username"
msgstr "`--user <用户>` — 包的开发者名称。默认为已登录用户的用户名"

#: ../../toolchain/moon/commands.md:86
msgid ""
"`--name <NAME>` — The name of the module. Default to the last part of the"
" path"
msgstr "`--name <名称>` — 包的名称。默认为路径的最后一部分"

#: ../../toolchain/moon/commands.md:90
msgid "`moon build`"
msgstr ""

#: ../../toolchain/moon/commands.md:92
msgid "Build the current package"
msgstr "构建当前包"

#: ../../toolchain/moon/commands.md:94
msgid "**Usage:** `moon build [OPTIONS]`"
msgstr "**用法：** `moon build [选项]`"

#: ../../toolchain/moon/commands.md:98 ../../toolchain/moon/commands.md:139
#: ../../toolchain/moon/commands.md:186 ../../toolchain/moon/commands.md:227
#: ../../toolchain/moon/commands.md:342
msgid "`--std` — Enable the standard library (default)"
msgstr "`--std` — 启用标准库（默认）"

#: ../../toolchain/moon/commands.md:99 ../../toolchain/moon/commands.md:140
#: ../../toolchain/moon/commands.md:187 ../../toolchain/moon/commands.md:228
#: ../../toolchain/moon/commands.md:343
msgid "`--nostd` — Disable the standard library"
msgstr "`--nostd` — 禁用标准库"

#: ../../toolchain/moon/commands.md:100 ../../toolchain/moon/commands.md:141
#: ../../toolchain/moon/commands.md:188 ../../toolchain/moon/commands.md:229
#: ../../toolchain/moon/commands.md:344
msgid "`-g`, `--debug` — Emit debug information"
msgstr "`-g`, `--debug` — 发出调试信息"

#: ../../toolchain/moon/commands.md:101 ../../toolchain/moon/commands.md:142
#: ../../toolchain/moon/commands.md:189 ../../toolchain/moon/commands.md:230
#: ../../toolchain/moon/commands.md:345
msgid "`--release` — Compile in release mode"
msgstr "`--release` — 在发布模式下编译"

#: ../../toolchain/moon/commands.md:102 ../../toolchain/moon/commands.md:143
#: ../../toolchain/moon/commands.md:190 ../../toolchain/moon/commands.md:231
#: ../../toolchain/moon/commands.md:346
msgid "`--strip` — Enable stripping debug information"
msgstr "`--strip` — 删除调试信息"

#: ../../toolchain/moon/commands.md:103 ../../toolchain/moon/commands.md:144
#: ../../toolchain/moon/commands.md:191 ../../toolchain/moon/commands.md:232
#: ../../toolchain/moon/commands.md:347
msgid "`--no-strip` — Disable stripping debug information"
msgstr "`--no-strip` — 不删除调试信息"

#: ../../toolchain/moon/commands.md:104 ../../toolchain/moon/commands.md:145
#: ../../toolchain/moon/commands.md:192 ../../toolchain/moon/commands.md:233
#: ../../toolchain/moon/commands.md:326 ../../toolchain/moon/commands.md:348
msgid "`--target <TARGET>` — Select output target"
msgstr "`--target <目标>` — 选择输出目标"

#: ../../toolchain/moon/commands.md:106 ../../toolchain/moon/commands.md:147
#: ../../toolchain/moon/commands.md:194 ../../toolchain/moon/commands.md:235
#: ../../toolchain/moon/commands.md:328 ../../toolchain/moon/commands.md:350
msgid "Possible values: `wasm`, `wasm-gc`, `js`, `native`, `llvm`, `all`"
msgstr "可能的值：`wasm`，`wasm-gc`，`js`，`native`，`llvm`，`all`"

#: ../../toolchain/moon/commands.md:108 ../../toolchain/moon/commands.md:149
#: ../../toolchain/moon/commands.md:196 ../../toolchain/moon/commands.md:237
#: ../../toolchain/moon/commands.md:352
msgid "`--enable-coverage` — Enable coverage instrumentation"
msgstr "`--enable-coverage` — 启用覆盖率指令"

#: ../../toolchain/moon/commands.md:109 ../../toolchain/moon/commands.md:150
#: ../../toolchain/moon/commands.md:197 ../../toolchain/moon/commands.md:238
#: ../../toolchain/moon/commands.md:289 ../../toolchain/moon/commands.md:353
msgid "`--sort-input` — Sort input files"
msgstr "`--sort-input` — 排序输入文件"

#: ../../toolchain/moon/commands.md:110 ../../toolchain/moon/commands.md:151
#: ../../toolchain/moon/commands.md:198 ../../toolchain/moon/commands.md:239
#: ../../toolchain/moon/commands.md:354
msgid "`--output-wat` — Output WAT instead of WASM"
msgstr "`--output-wat` — 输出 WAT 而不是 WASM"

#: ../../toolchain/moon/commands.md:111 ../../toolchain/moon/commands.md:152
#: ../../toolchain/moon/commands.md:199 ../../toolchain/moon/commands.md:240
#: ../../toolchain/moon/commands.md:355
msgid "`-d`, `--deny-warn` — Treat all warnings as errors"
msgstr "`-d`, `--deny-warn` — 将所有警告视为错误"

#: ../../toolchain/moon/commands.md:112 ../../toolchain/moon/commands.md:153
#: ../../toolchain/moon/commands.md:200 ../../toolchain/moon/commands.md:241
#: ../../toolchain/moon/commands.md:356
msgid ""
"`--no-render` — Don't render diagnostics from moonc (don't pass '-error-"
"format json' to moonc)"
msgstr "`--no-render` — 不要从 moonc 渲染诊断（不要将 '-error-format json' 传递给 moonc）"

#: ../../toolchain/moon/commands.md:113 ../../toolchain/moon/commands.md:154
#: ../../toolchain/moon/commands.md:201 ../../toolchain/moon/commands.md:242
#: ../../toolchain/moon/commands.md:357
msgid "`--warn-list <WARN_LIST>` — Warn list config"
msgstr "`--warn-list <WARN_LIST>` — 警告列表配置"

#: ../../toolchain/moon/commands.md:114 ../../toolchain/moon/commands.md:155
#: ../../toolchain/moon/commands.md:202 ../../toolchain/moon/commands.md:243
#: ../../toolchain/moon/commands.md:358
msgid "`--alert-list <ALERT_LIST>` — Alert list config"
msgstr "`--alert-list <ALERT_LIST>` — 警报列表配置"

#: ../../toolchain/moon/commands.md:115 ../../toolchain/moon/commands.md:156
#: ../../toolchain/moon/commands.md:203 ../../toolchain/moon/commands.md:244
#: ../../toolchain/moon/commands.md:359
msgid "`-j`, `--jobs <JOBS>` — Set the max number of jobs to run in parallel"
msgstr "`-j`，`--jobs <作业数>` — 设置要并行运行的最大作业数"

#: ../../toolchain/moon/commands.md:116 ../../toolchain/moon/commands.md:157
#: ../../toolchain/moon/commands.md:204 ../../toolchain/moon/commands.md:245
#: ../../toolchain/moon/commands.md:360
msgid ""
"`--render-no-loc <MIN_LEVEL>` — Render no-location diagnostics starting "
"from a certain level"
msgstr "`--render-no-loc <最低级别>` — 从某个级别开始渲染无位置的诊断"

#: ../../toolchain/moon/commands.md:118 ../../toolchain/moon/commands.md:159
#: ../../toolchain/moon/commands.md:206 ../../toolchain/moon/commands.md:247
#: ../../toolchain/moon/commands.md:362
msgid "Default value: `error`"
msgstr "默认值：`error`"

#: ../../toolchain/moon/commands.md:120 ../../toolchain/moon/commands.md:161
#: ../../toolchain/moon/commands.md:208 ../../toolchain/moon/commands.md:249
#: ../../toolchain/moon/commands.md:364
msgid "Possible values: `info`, `warn`, `error`"
msgstr "可能的值：`info`，`warn`，`error`"

#: ../../toolchain/moon/commands.md:122 ../../toolchain/moon/commands.md:164
#: ../../toolchain/moon/commands.md:210 ../../toolchain/moon/commands.md:259
#: ../../toolchain/moon/commands.md:312 ../../toolchain/moon/commands.md:324
#: ../../toolchain/moon/commands.md:369 ../../toolchain/moon/commands.md:443
#: ../../toolchain/moon/commands.md:455
msgid ""
"`--frozen` — Do not sync dependencies, assuming local dependencies are "
"up-to-date"
msgstr "`--frozen` — 不同步依赖项，假设本地依赖项是最新的"

#: ../../toolchain/moon/commands.md:123
msgid ""
"`-w`, `--watch` — Monitor the file system and automatically build "
"artifacts"
msgstr "`-w`, `--watch` — 监视文件系统并自动构建制品"

#: ../../toolchain/moon/commands.md:127
msgid "`moon check`"
msgstr ""

#: ../../toolchain/moon/commands.md:129
msgid "Check the current package, but don't build object files"
msgstr "检查当前包，但不构建对象文件"

#: ../../toolchain/moon/commands.md:131
msgid "**Usage:** `moon check [OPTIONS] [SINGLE_FILE]`"
msgstr "**用法：** `moon check [选项] [单文件路径]`"

#: ../../toolchain/moon/commands.md:135
msgid "`<SINGLE_FILE>` — Check single file (.mbt or .mbt.md)"
msgstr "`<单文件路径>` — 检查单个文件（.mbt 或 .mbt.md）"

#: ../../toolchain/moon/commands.md:163
msgid "`--output-json` — Output in json format"
msgstr "`--output-json` — 以 json 格式输出"

#: ../../toolchain/moon/commands.md:165
msgid "`-w`, `--watch` — Monitor the file system and automatically check files"
msgstr "`-w`, `--watch` — 监视文件系统并自动检查文件"

#: ../../toolchain/moon/commands.md:166
msgid ""
"`-p`, `--package-path <PACKAGE_PATH>` — The package(and it's deps) to "
"check"
msgstr "`-p`，`--package-path <包路径>` — 要检查的包（及其依赖项）"

#: ../../toolchain/moon/commands.md:167
msgid ""
"`--patch-file <PATCH_FILE>` — The patch file to check, Only valid when "
"checking specified package"
msgstr "`--patch-file <PATCH_FILE>` — 要检查的补丁文件，仅在检查指定包时有效"

#: ../../toolchain/moon/commands.md:168
msgid ""
"`--no-mi` — Whether to skip the mi generation, Only valid when checking "
"specified package"
msgstr "`--no-mi` — 是否跳过 mi 生成，仅在检查指定包时有效"

#: ../../toolchain/moon/commands.md:169
msgid "`--explain` — Whether to explain the error code with details"
msgstr "`--explain` — 是否使用详细信息解释错误代码"

#: ../../toolchain/moon/commands.md:173
msgid "`moon run`"
msgstr ""

#: ../../toolchain/moon/commands.md:175
msgid "Run a main package"
msgstr "`run` — 运行一个 main 包"

#: ../../toolchain/moon/commands.md:177
msgid "**Usage:** `moon run [OPTIONS] <PACKAGE_OR_MBT_FILE> [ARGS]...`"
msgstr "**用法：** `moon run [选项] <包或 mbt 文件> [参数]...`"

#: ../../toolchain/moon/commands.md:181
msgid "`<PACKAGE_OR_MBT_FILE>` — The package or .mbt file to run"
msgstr "`<包或 MoonBit 文件>` — 要运行的包或 .mbt 文件"

#: ../../toolchain/moon/commands.md:182
msgid "`<ARGS>` — The arguments provided to the program to be run"
msgstr "`<参数>` — 提供给要运行的程序的参数"

#: ../../toolchain/moon/commands.md:211
msgid "`--build-only` — Only build, do not run the code"
msgstr "`--build-only` — 仅构建，不运行代码"

#: ../../toolchain/moon/commands.md:215
msgid "`moon test`"
msgstr ""

#: ../../toolchain/moon/commands.md:217
msgid "Test the current package"
msgstr "测试当前包"

#: ../../toolchain/moon/commands.md:219
msgid "**Usage:** `moon test [OPTIONS] [SINGLE_FILE]`"
msgstr "**用法：** `moon test [选项] [单文件路径]`"

#: ../../toolchain/moon/commands.md:223
msgid "`<SINGLE_FILE>` — Run test in single file (.mbt or .mbt.md)"
msgstr "`<单文件路径>` — 在单个文件中运行测试（.mbt 或 .mbt.md）"

#: ../../toolchain/moon/commands.md:251 ../../toolchain/moon/commands.md:366
msgid "`-p`, `--package <PACKAGE>` — Run test in the specified package"
msgstr "`-p`, `--package <包>` — 在指定的包中运行测试"

#: ../../toolchain/moon/commands.md:252 ../../toolchain/moon/commands.md:367
msgid ""
"`-f`, `--file <FILE>` — Run test in the specified file. Only valid when "
"`--package` is also specified"
msgstr "`-f`, `--file <文件>` — 在指定的文件中运行测试。仅在指定了 `--package` 时有效"

#: ../../toolchain/moon/commands.md:253 ../../toolchain/moon/commands.md:368
msgid ""
"`-i`, `--index <INDEX>` — Run only the index-th test in the file. Only "
"valid when `--file` is also specified"
msgstr "`-i`, `--index <索引>` — 仅在文件中运行第 index 个测试。仅在指定了 `--file` 时有效"

#: ../../toolchain/moon/commands.md:254
msgid ""
"`--doc-index <DOC_INDEX>` — Run only the index-th doc test in the file. "
"Only valid when `--file` is also specified"
msgstr "`--doc-index <文档索引>` — 仅在文件中运行第 index 个文档测试。仅在指定了 `--file` 时有效"

#: ../../toolchain/moon/commands.md:255
msgid "`-u`, `--update` — Update the test snapshot"
msgstr "`-u`, `--update` — 更新测试快照"

#: ../../toolchain/moon/commands.md:256
msgid ""
"`-l`, `--limit <LIMIT>` — Limit of expect test update passes to run, in "
"order to avoid infinite loops"
msgstr "`-l`, `--limit <限制>` — 限制期望测试更新通过的运行次数，以避免无限循环"

#: ../../toolchain/moon/commands.md:258
msgid "Default value: `256`"
msgstr "默认值：`256`"

#: ../../toolchain/moon/commands.md:260
msgid "`--build-only` — Only build, do not run the tests"
msgstr "`--build-only` — 仅构建，不运行测试"

#: ../../toolchain/moon/commands.md:261
msgid "`--no-parallelize` — Run the tests in a target backend sequentially"
msgstr "`--no-parallelize` — 顺序运行目标后端中的测试"

#: ../../toolchain/moon/commands.md:262
msgid "`--test-failure-json` — Print failure message in JSON format"
msgstr "`--test-failure-json` — 以 JSON 格式打印失败消息"

#: ../../toolchain/moon/commands.md:263
msgid "`--patch-file <PATCH_FILE>` — Path to the patch file"
msgstr "`--patch-file <补丁文件>` — 补丁文件的路径"

#: ../../toolchain/moon/commands.md:264
msgid "`--doc` — Run doc test"
msgstr "`--doc` — 运行文档测试"

#: ../../toolchain/moon/commands.md:268
msgid "`moon clean`"
msgstr ""

#: ../../toolchain/moon/commands.md:270
msgid "Remove the target directory"
msgstr "删除 target 目录"

#: ../../toolchain/moon/commands.md:272
msgid "**Usage:** `moon clean`"
msgstr "**用法：** `moon clean`"

#: ../../toolchain/moon/commands.md:276
msgid "`moon fmt`"
msgstr ""

#: ../../toolchain/moon/commands.md:278
msgid "Format source code"
msgstr "格式化源代码"

#: ../../toolchain/moon/commands.md:280
msgid "**Usage:** `moon fmt [OPTIONS] [ARGS]...`"
msgstr "**用法：** `moon fmt [选项] [参数]...`"

#: ../../toolchain/moon/commands.md:284
msgid "`<ARGS>`"
msgstr "`<参数>`"

#: ../../toolchain/moon/commands.md:288
msgid "`--check` — Check only and don't change the source code"
msgstr "`--check` — 仅检查，不更改源代码"

#: ../../toolchain/moon/commands.md:290
msgid "`--block-style <BLOCK_STYLE>` — Add separator between each segments"
msgstr "`--block-style <块样式>` — 在每个段之间添加分隔符"

#: ../../toolchain/moon/commands.md:292
msgid "Possible values: `false`, `true`"
msgstr "可能的值：`false`，`true`"

#: ../../toolchain/moon/commands.md:297
msgid "`moon doc`"
msgstr ""

#: ../../toolchain/moon/commands.md:299
msgid "Generate documentation"
msgstr "生成文档"

#: ../../toolchain/moon/commands.md:301
msgid "**Usage:** `moon doc [OPTIONS]`"
msgstr "**用法：** `moon doc [选项]`"

#: ../../toolchain/moon/commands.md:305
msgid "`--serve` — Start a web server to serve the documentation"
msgstr "`--serve` — 启动一个 Web 服务器来提供文档"

#: ../../toolchain/moon/commands.md:306
msgid "`-b`, `--bind <BIND>` — The address of the server"
msgstr "`-b`, `--bind <绑定>` — 服务器的地址"

#: ../../toolchain/moon/commands.md:308
msgid "Default value: `127.0.0.1`"
msgstr "默认值：`"

#: ../../toolchain/moon/commands.md:309
msgid "`-p`, `--port <PORT>` — The port of the server"
msgstr "`-p`, `--port <端口>` — 服务器的端口"

#: ../../toolchain/moon/commands.md:311
msgid "Default value: `3000`"
msgstr "默认值：`3000`"

#: ../../toolchain/moon/commands.md:316
msgid "`moon info`"
msgstr ""

#: ../../toolchain/moon/commands.md:318
msgid "Generate public interface (`.mbti`) files for all packages in the module"
msgstr "为模块中的所有包生成公共接口（`.mbti`）文件"

#: ../../toolchain/moon/commands.md:320
msgid "**Usage:** `moon info [OPTIONS]`"
msgstr "**用法：** `moon info [选项]`"

#: ../../toolchain/moon/commands.md:325
msgid "`--no-alias` — Do not use alias to shorten package names in the output"
msgstr "`--no-alias` — 不要使用别名来缩短输出中的包名"

#: ../../toolchain/moon/commands.md:330
msgid ""
"`-p`, `--package <PACKAGE>` — only emit mbti files for the specified "
"package"
msgstr "`-p`, `--package <包>` — 仅为指定的包生成 mbti 文件"

#: ../../toolchain/moon/commands.md:334
msgid "`moon bench`"
msgstr "`moon bench`"

#: ../../toolchain/moon/commands.md:336
msgid "Run benchmarks in the current package"
msgstr "对当前包运行基准测"

#: ../../toolchain/moon/commands.md:338
msgid "**Usage:** `moon bench [OPTIONS]`"
msgstr "**用法：** `moon bench [选项]`"

#: ../../toolchain/moon/commands.md:370
msgid "`--build-only` — Only build, do not bench"
msgstr "`--build-only` — 仅构建，不运行基准测试"

#: ../../toolchain/moon/commands.md:371
msgid "`--no-parallelize` — Run the benchmarks in a target backend sequentially"
msgstr "`--no-parallelize` — 顺序执行目标后端中的基准测试"

#: ../../toolchain/moon/commands.md:375
msgid "`moon add`"
msgstr ""

#: ../../toolchain/moon/commands.md:377
msgid "Add a dependency"
msgstr "添加一个依赖"

#: ../../toolchain/moon/commands.md:379
msgid "**Usage:** `moon add [OPTIONS] <PACKAGE_PATH>`"
msgstr "**用法：** `moon add [选项] <包路径>`"

#: ../../toolchain/moon/commands.md:383
msgid "`<PACKAGE_PATH>` — The package path to add"
msgstr "`<包路径>` — 要添加的包路径"

#: ../../toolchain/moon/commands.md:387
msgid "`--bin` — Whether to add the dependency as a binary"
msgstr "`--bin` — 是否将依赖项添加为二进制文件"

#: ../../toolchain/moon/commands.md:391
msgid "`moon remove`"
msgstr ""

#: ../../toolchain/moon/commands.md:393
msgid "Remove a dependency"
msgstr "移除一个依赖"

#: ../../toolchain/moon/commands.md:395
msgid "**Usage:** `moon remove <PACKAGE_PATH>`"
msgstr "**用法：** `moon remove <包路径>`"

#: ../../toolchain/moon/commands.md:399
msgid "`<PACKAGE_PATH>` — The package path to remove"
msgstr "`<包路径>` — 要移除的包路径"

#: ../../toolchain/moon/commands.md:403
msgid "`moon install`"
msgstr ""

#: ../../toolchain/moon/commands.md:405
msgid "Install dependencies"
msgstr "安装依赖"

#: ../../toolchain/moon/commands.md:407
msgid "**Usage:** `moon install`"
msgstr "**用法：** `moon install`"

#: ../../toolchain/moon/commands.md:411
msgid "`moon tree`"
msgstr ""

#: ../../toolchain/moon/commands.md:413
msgid "Display the dependency tree"
msgstr "显示依赖树"

#: ../../toolchain/moon/commands.md:415
msgid "**Usage:** `moon tree`"
msgstr "**用法：** `moon tree`"

#: ../../toolchain/moon/commands.md:419
msgid "`moon login`"
msgstr "`moon login`"

#: ../../toolchain/moon/commands.md:421
msgid "Log in to your account"
msgstr "登录到您的账户"

#: ../../toolchain/moon/commands.md:423
msgid "**Usage:** `moon login`"
msgstr "**用法：** `moon login`"

#: ../../toolchain/moon/commands.md:427
msgid "`moon register`"
msgstr ""

#: ../../toolchain/moon/commands.md:429
msgid "Register an account at mooncakes.io"
msgstr "在 mooncakes.io 注册一个账户"

#: ../../toolchain/moon/commands.md:431
msgid "**Usage:** `moon register`"
msgstr "**用法：** `moon register`"

#: ../../toolchain/moon/commands.md:435
msgid "`moon publish`"
msgstr ""

#: ../../toolchain/moon/commands.md:437
msgid "Publish the current module"
msgstr "发布当前模块"

#: ../../toolchain/moon/commands.md:439
msgid "**Usage:** `moon publish [OPTIONS]`"
msgstr "**用法：** `moon publish [选项]`"

#: ../../toolchain/moon/commands.md:447
msgid "`moon package`"
msgstr ""

#: ../../toolchain/moon/commands.md:449
msgid "Package the current module"
msgstr "打包当前模块"

#: ../../toolchain/moon/commands.md:451
msgid "**Usage:** `moon package [OPTIONS]`"
msgstr "**用法：** `moon package [选项]`"

#: ../../toolchain/moon/commands.md:456
msgid "`--list`"
msgstr "`--list`"

#: ../../toolchain/moon/commands.md:460
msgid "`moon update`"
msgstr ""

#: ../../toolchain/moon/commands.md:462
msgid "Update the package registry index"
msgstr "更新包注册表索引"

#: ../../toolchain/moon/commands.md:464
msgid "**Usage:** `moon update`"
msgstr "**用法：** `moon update`"

#: ../../toolchain/moon/commands.md:468
msgid "`moon coverage`"
msgstr ""

#: ../../toolchain/moon/commands.md:470
msgid "Code coverage utilities"
msgstr "代码覆盖率工具"

#: ../../toolchain/moon/commands.md:472
msgid "**Usage:** `moon coverage <COMMAND>`"
msgstr "**用法：** `moon coverage <命令>`"

#: ../../toolchain/moon/commands.md:476
msgid "`analyze` — Run test with instrumentation and report coverage"
msgstr "`analyze` — 运行带有指令的测试并报告覆盖率"

#: ../../toolchain/moon/commands.md:477
msgid "`report` — Generate code coverage report"
msgstr "`report` — 生成代码覆盖率报告"

#: ../../toolchain/moon/commands.md:478
msgid "`clean` — Clean up coverage artifacts"
msgstr "`clean` — 清理覆盖率工件"

#: ../../toolchain/moon/commands.md:482
msgid "`moon coverage analyze`"
msgstr ""

#: ../../toolchain/moon/commands.md:484
msgid "Run test with instrumentation and report coverage"
msgstr "运行带有指令的测试并报告覆盖率"

#: ../../toolchain/moon/commands.md:486
msgid "**Usage:** `moon coverage analyze [OPTIONS] [-- <EXTRA_FLAGS>...]`"
msgstr "**用法：** `moon coverage analyze [选项] [-- <额外标志>...]`"

#: ../../toolchain/moon/commands.md:490
msgid "`<EXTRA_FLAGS>` — Extra flags passed directly to `moon_cove_report`"
msgstr "`<额外标志>` — 直接传递给 `moon_cove_report` 的额外标志"

#: ../../toolchain/moon/commands.md:494
msgid "`-p`, `--package <PACKAGE>` — Analyze coverage for a specific package"
msgstr "`-p`, `--package <包>` — 仅为指定的包生成测试覆盖率"

#: ../../toolchain/moon/commands.md:498
msgid "`moon coverage report`"
msgstr ""

#: ../../toolchain/moon/commands.md:500
msgid "Generate code coverage report"
msgstr "生成代码覆盖率报告"

#: ../../toolchain/moon/commands.md:502
msgid "**Usage:** `moon coverage report [args]... [COMMAND]`"
msgstr "**用法：** `moon coverage report [参数]... [命令]`"

#: ../../toolchain/moon/commands.md:506
msgid "`<args>` — Arguments to pass to the coverage utility"
msgstr "`<参数>` — 要传递给覆盖率工具的参数"

#: ../../toolchain/moon/commands.md:510
msgid "`-h`, `--help` — Show help for the coverage utility"
msgstr "`-h`, `--help` — 显示覆盖率工具的帮助"

#: ../../toolchain/moon/commands.md:514
msgid "`moon coverage clean`"
msgstr ""

#: ../../toolchain/moon/commands.md:516
msgid "Clean up coverage artifacts"
msgstr "清理覆盖率工件"

#: ../../toolchain/moon/commands.md:518
msgid "**Usage:** `moon coverage clean`"
msgstr "**用法：** `moon coverage clean`"

#: ../../toolchain/moon/commands.md:522
msgid "`moon generate-build-matrix`"
msgstr ""

#: ../../toolchain/moon/commands.md:524
msgid "Generate build matrix for benchmarking (legacy feature)"
msgstr "生成用于基准测试的构建矩阵（遗留功能）"

#: ../../toolchain/moon/commands.md:526
msgid "**Usage:** `moon generate-build-matrix [OPTIONS] --output-dir <OUT_DIR>`"
msgstr "**用法：** `moon generate-build-matrix [选项] --output-dir <输出目录>`"

#: ../../toolchain/moon/commands.md:530
msgid ""
"`-n <NUMBER>` — Set all of `drow`, `dcol`, `mrow`, `mcol` to the same "
"value"
msgstr "`-n <数字>` — 将 `drow`、`dcol`、`mrow`、`mcol` 的所有值设置为相同的值"

#: ../../toolchain/moon/commands.md:531
msgid "`--drow <DIR_ROWS>` — Number of directory rows"
msgstr "`--drow <DIR_ROWS>` — 目录行数"

#: ../../toolchain/moon/commands.md:532
msgid "`--dcol <DIR_COLS>` — Number of directory columns"
msgstr "`--dcol <DIR_COLS>` — 目录列数"

#: ../../toolchain/moon/commands.md:533
msgid "`--mrow <MOD_ROWS>` — Number of module rows"
msgstr "`--mrow <MOD_ROWS>` — 模块行数"

#: ../../toolchain/moon/commands.md:534
msgid "`--mcol <MOD_COLS>` — Number of module columns"
msgstr "`--mcol <MOD_COLS>` — 模块列数"

#: ../../toolchain/moon/commands.md:535
msgid "`-o`, `--output-dir <OUT_DIR>` — The output directory"
msgstr "`-o`, `--output-dir <输出目录>` — 输出目录"

#: ../../toolchain/moon/commands.md:539
msgid "`moon upgrade`"
msgstr ""

#: ../../toolchain/moon/commands.md:541
msgid "Upgrade toolchains"
msgstr "升级工具链"

#: ../../toolchain/moon/commands.md:543
msgid "**Usage:** `moon upgrade [OPTIONS]`"
msgstr "**用法：** `moon upgrade [选项]`"

#: ../../toolchain/moon/commands.md:547
msgid "`-f`, `--force` — Force upgrade"
msgstr "`-f`, `--force` — 强制升级"

#: ../../toolchain/moon/commands.md:548
msgid "`--dev` — Install the latest development version"
msgstr "`--dev` — 安装最新的开发版本"

#: ../../toolchain/moon/commands.md:552
msgid "`moon shell-completion`"
msgstr ""

#: ../../toolchain/moon/commands.md:554
msgid "Generate shell completion for bash/elvish/fish/pwsh/zsh to stdout"
msgstr "为 bash/elvish/fish/pwsh/zsh 生成 shell 补全并输出到标准输出"

#: ../../toolchain/moon/commands.md:556
msgid "**Usage:** `moon shell-completion [OPTIONS]`"
msgstr "**用法：** `moon shell-completion [选项]`"

#: ../../toolchain/moon/commands.md:559
msgid ""
"Discussion: Enable tab completion for Bash, Elvish, Fish, Zsh, or "
"PowerShell The script is output on `stdout`, allowing one to re-direct "
"the output to the file of their choosing. Where you place the file will "
"depend on which shell, and which operating system you are using. Your "
"particular configuration may also determine where these scripts need to "
"be placed."
msgstr ""
"讨论：为 Bash、Elvish、Fish、Zsh 或 PowerShell "
"启用命令补全功能。该脚本的输出在标准输出（stdout）上，用户可以将输出重定向到自己选择的文件。文件的存放位置将取决于所使用的 shell "
"以及操作系统。具体的配置也可能决定这些脚本应放置在何处。"

#: ../../toolchain/moon/commands.md:567
msgid ""
"The completion scripts won't update itself, so you may need to "
"periodically run this command to get the latest completions. Or you may "
"put `eval \"$(moon shell-completion --shell <SHELL>)\"` in your shell's "
"rc file to always load newest completions on startup. Although it's "
"considered not as efficient as having the completions script installed."
msgstr ""
"补全脚本不会自动更新，因此你可能需要定期运行此命令以获取最新的补全内容。或者，你可以将`eval \"$(moon shell-"
"completion --shell <SHELL>)\"`添加到你所用 shell 的配置文件（rc file）中，这样每次启动 shell "
"时都会加载最新的补全内容。不过，这种方式被认为不如安装补全脚本高效。 "

#: ../../toolchain/moon/commands.md:574
msgid ""
"Here are some common set ups for the three supported shells under Unix "
"and similar operating systems (such as GNU/Linux)."
msgstr "以下是在 Unix 及类似操作系统（如 GNU/Linux）下，针对三种受支持的 shell 的一些常见设置。"

#: ../../toolchain/moon/commands.md:577
msgid "Bash:"
msgstr ""

#: ../../toolchain/moon/commands.md:579
msgid ""
"Completion files are commonly stored in `/etc/bash_completion.d/` for "
"system-wide commands, but can be stored in `~/.local/share/bash-"
"completion/completions` for user-specific commands. Run the command:"
msgstr ""
"对于系统范围的命令，补全文件通常存放在 `/etc/bash_completion.d/`；而针对用户特定的命令，它们可存放在 "
"`~/.local/share/bash - completion/completions`。运行以下命令："

#: ../../toolchain/moon/commands.md:584
msgid ""
"$ mkdir -p ~/.local/share/bash-completion/completions\n"
"$ moon shell-completion --shell bash >> ~/.local/share/bash-"
"completion/completions/moon\n"
msgstr ""

#: ../../toolchain/moon/commands.md:587 ../../toolchain/moon/commands.md:606
msgid ""
"This installs the completion script. You may have to log out and log back"
" in to your shell session for the changes to take effect."
msgstr "这会安装补全脚本。你可能需要注销并重新登录 shell 会话，以使更改生效。"

#: ../../toolchain/moon/commands.md:590
msgid "Bash (macOS/Homebrew):"
msgstr ""

#: ../../toolchain/moon/commands.md:592
msgid ""
"Homebrew stores bash completion files within the Homebrew directory. With"
" the `bash-completion` brew formula installed, run the command:"
msgstr ""
"Homebrew 会将 bash 补全文件存储在 Homebrew 目录内。在安装了 `bash-completion` 的 Homebrew "
"软件包后，运行以下命令："

#: ../../toolchain/moon/commands.md:595
msgid ""
"$ mkdir -p $(brew --prefix)/etc/bash_completion.d\n"
"$ moon shell-completion --shell bash > $(brew "
"--prefix)/etc/bash_completion.d/moon.bash-completion\n"
msgstr ""

#: ../../toolchain/moon/commands.md:598
msgid "Fish:"
msgstr ""

#: ../../toolchain/moon/commands.md:600
msgid ""
"Fish completion files are commonly stored in "
"`$HOME/.config/fish/completions`. Run the command:"
msgstr "Fish 补全文件通常存储在 `$HOME/.config/fish/completions` 目录下。运行以下命令： "

#: ../../toolchain/moon/commands.md:603
msgid ""
"$ mkdir -p ~/.config/fish/completions\n"
"$ moon shell-completion --shell fish > "
"~/.config/fish/completions/moon.fish\n"
msgstr ""

#: ../../toolchain/moon/commands.md:609
msgid "Elvish:"
msgstr ""

#: ../../toolchain/moon/commands.md:611
msgid ""
"Elvish completions are commonly stored in a single `completers` module. A"
" typical module search path is `~/.config/elvish/lib`, and running the "
"command:"
msgstr ""

#: ../../toolchain/moon/commands.md:615
msgid ""
"$ moon shell-completion --shell elvish >> "
"~/.config/elvish/lib/completers.elv\n"
msgstr ""

#: ../../toolchain/moon/commands.md:617
msgid ""
"will install the completions script. Note that use `>>` (append)  instead"
" of `>` (overwrite) to prevent overwriting the existing completions  for "
"other commands. Then prepend your rc.elv with:"
msgstr "将安装补全脚本。请注意使用`>>`（追加）而不是 `>`（覆盖），以防止覆盖其他命令的现有补全。然后在你的 rc.elv 文件前面添加："

#: ../../toolchain/moon/commands.md:621
msgid "`use completers`\n"
msgstr ""

#: ../../toolchain/moon/commands.md:623
msgid "to load the `completers` module and enable completions."
msgstr "以加载 `completers` 模块并启用补全功能。"

#: ../../toolchain/moon/commands.md:625
msgid "Zsh:"
msgstr ""

#: ../../toolchain/moon/commands.md:627
msgid ""
"ZSH completions are commonly stored in any directory listed in your "
"`$fpath` variable. To use these completions, you must either add the "
"generated script to one of those directories, or add your own to this "
"list."
msgstr ""
"ZSH 补全文件通常存放在 `$fpath` "
"变量所列出的任意目录中。要使用这些补全功能，你要么将生成的脚本添加到这些目录之一，要么将你自己的目录添加到这个列表中。"

#: ../../toolchain/moon/commands.md:632
msgid ""
"Adding a custom directory is often the safest bet if you are unsure of "
"which directory to use. First create the directory; for this example "
"we'll create a hidden directory inside our `$HOME` directory:"
msgstr "如果你不确定该使用哪个目录，添加一个自定义目录通常是最稳妥的做法。首先创建这个目录；在这个示例中，我们将在 `$HOME` 目录下创建一个隐藏目录："

#: ../../toolchain/moon/commands.md:637
msgid "$ mkdir ~/.zfunc\n"
msgstr ""

#: ../../toolchain/moon/commands.md:639
msgid "Then add the following lines to your `.zshrc` just before `compinit`:"
msgstr "然后，在你的 `.zshrc` 文件里 `compinit` 命令之前添加以下几行："

#: ../../toolchain/moon/commands.md:642
msgid "fpath+=~/.zfunc\n"
msgstr ""

#: ../../toolchain/moon/commands.md:644
msgid "Now you can install the completions script using the following command:"
msgstr "现在你可以使用以下命令来安装补全脚本"

#: ../../toolchain/moon/commands.md:647
msgid "$ moon shell-completion --shell zsh > ~/.zfunc/_moon\n"
msgstr ""

#: ../../toolchain/moon/commands.md:649
msgid "You must then open a new zsh session, or simply run"
msgstr "然后，你必须开启一个新的 zsh 会话，或者直接运行 "

#: ../../toolchain/moon/commands.md:651
msgid "$ . ~/.zshrc\n"
msgstr ""

#: ../../toolchain/moon/commands.md:653
msgid "for the new completions to take effect."
msgstr "以便新的补全功能生效。"

#: ../../toolchain/moon/commands.md:655
msgid "Custom locations:"
msgstr ""

#: ../../toolchain/moon/commands.md:657
msgid ""
"Alternatively, you could save these files to the place of your choosing, "
"such as a custom directory inside your $HOME. Doing so will require you "
"to add the proper directives, such as `source`ing inside your login "
"script. Consult your shells documentation for how to add such directives."
msgstr ""
"另外，你可以将这些文件保存到你选择的位置，比如你家目录（$HOME）下的自定义目录。这样做的话，你需要添加合适的指令，例如在登录脚本中使用 "
"`source`命令引入这些文件。请查阅你所使用 shell 的文档，了解如何添加此类指令。"

#: ../../toolchain/moon/commands.md:663
msgid "PowerShell:"
msgstr ""

#: ../../toolchain/moon/commands.md:665
msgid ""
"The powershell completion scripts require PowerShell v5.0+ (which comes "
"with Windows 10, but can be downloaded separately for windows 7 or 8.1)."
msgstr ""
"PowerShell 补全脚本需要 PowerShell 5.0 及更高版本（Windows 10 系统自带该版本，而 Windows 7 或 "
"8.1 系统可单独下载）。 "

#: ../../toolchain/moon/commands.md:669
msgid "First, check if a profile has already been set"
msgstr "首先，检查是否已经设置了配置文件。"

#: ../../toolchain/moon/commands.md:671
msgid "PS C:\\> Test-Path $profile\n"
msgstr ""

#: ../../toolchain/moon/commands.md:673
msgid "If the above command returns `False` run the following"
msgstr "如果上述命令返回 `False`，则运行以下命令。"

#: ../../toolchain/moon/commands.md:675
msgid "PS C:\\> New-Item -path $profile -type file -force\n"
msgstr ""

#: ../../toolchain/moon/commands.md:677
msgid ""
"Now open the file provided by `$profile` (if you used the `New-Item` "
"command it will be "
"`${env:USERPROFILE}\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1`"
msgstr ""
"现在打开由 `$profile` 指定的文件（如果你使用了 `New-Item` 命令，该文件将是 "
"`${env:USERPROFILE}\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1`）。"
" "

#: ../../toolchain/moon/commands.md:681
msgid ""
"Next, we either save the completions file into our profile, or into a "
"separate file and source it inside our profile. To save the completions "
"into our profile simply use"
msgstr "接下来，我们可以将补全文件保存到我们的配置文件中，或者保存到一个单独的文件里"

#: ../../toolchain/moon/commands.md:685
msgid ""
"PS C:\\> moon shell-completion --shell powershell >>\n"
"${env:USERPROFILE}\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1"
"\n"
msgstr ""

#: ../../toolchain/moon/commands.md:688
msgid ""
"This discussion is taken from `rustup completions` command with some "
"changes."
msgstr "这段讨论内容改编自 `rustup completions` 命令相关内容，并做了一些修改。"

#: ../../toolchain/moon/commands.md:693
msgid "`--shell <SHELL>` — The shell to generate completion for"
msgstr "`--shell <SHELL>` — 要为其生成补全的 shell"

#: ../../toolchain/moon/commands.md:695
msgid "Default value: `<your shell>`"
msgstr "默认值：`<您的 shell>`"

#: ../../toolchain/moon/commands.md:697
msgid "Possible values: `bash`, `elvish`, `fish`, `powershell`, `zsh`"
msgstr "可能的值：`bash`, `elvish`, `fish`, `powershell`, `zsh`"

#: ../../toolchain/moon/commands.md:702
msgid "`moon version`"
msgstr ""

#: ../../toolchain/moon/commands.md:704
msgid "Print version information and exit"
msgstr "打印版本信息并退出"

#: ../../toolchain/moon/commands.md:706
msgid "**Usage:** `moon version [OPTIONS]`"
msgstr "**用法：** `moon version [选项]`"

#: ../../toolchain/moon/commands.md:710
msgid "`--all` — Print all version information"
msgstr "`--all` — 打印所有版本信息"

#: ../../toolchain/moon/commands.md:711
msgid "`--json` — Print version information in JSON format"
msgstr "`--json` — 以 JSON 格式打印版本信息"

#: ../../toolchain/moon/commands.md:712
msgid "`--no-path` — Do not print the path"
msgstr "`--no-path` — 不打印路径"

#: ../../toolchain/moon/commands.md:718
msgid ""
"<small><i>     This document was generated automatically by     <a "
"href=\"https://crates.io/crates/clap-markdown\"><code>clap-"
"markdown</code></a>. </i></small>"
msgstr ""
"<small><i>     本文档是由     <a href=\"https://crates.io/crates/clap-"
"markdown\"><code>clap-markdown</code></a>     自动生成的。 </i></small>"

#: ../../toolchain/moon/coverage.md:1
msgid "Measuring code coverage"
msgstr "测量代码覆盖率"

#: ../../toolchain/moon/coverage.md:3
msgid ""
"We have included tooling for you to measure the code coverage of test and"
" program runs. The measurement is currently based on branch coverage. In "
"other words, it measures whether each program branch was executed, and "
"how many times if they were."
msgstr "我们为您提供了工具，用于测量测试和程序运行的代码覆盖率。目前的测量基于分支覆盖率。换句话说，它测量了每个程序分支是否被执行，以及如果执行了多少次。"

#: ../../toolchain/moon/coverage.md:8
msgid "Running code coverage in tests"
msgstr "在测试中运行代码覆盖率"

#: ../../toolchain/moon/coverage.md:10
msgid ""
"To enable coverage instrumentation in tests, you need to pass the "
"`--enable-coverage` argument to `moon test`."
msgstr "要在测试中启用覆盖率仪器，您需要将 `--enable-coverage` 参数传递给 `moon test`。"

#: ../../toolchain/moon/coverage.md:13
msgid ""
"$ moon test --enable-coverage\n"
"...\n"
"Total tests: 3077, passed: 3077, failed: 0.\n"
msgstr ""

#: ../../toolchain/moon/coverage.md:19
msgid ""
"This will recompile the project if they weren't previously compiled with "
"coverage enabled. The execution process will look the same, but new "
"coverage result files will be generated under the `target` directory."
msgstr "如果之前没有使用覆盖率启用编译项目，这将重新编译项目。执行过程看起来是一样的，但是新的覆盖率结果文件将在 `target` 目录下生成。"

#: ../../toolchain/moon/coverage.md:24
msgid ""
"$ ls target/wasm-gc/debug/test/ -w1\n"
"array\n"
"...\n"
"moonbit_coverage_1735628238436873.txt\n"
"moonbit_coverage_1735628238436883.txt\n"
"...\n"
"moonbit_coverage_1735628238514678.txt\n"
"option/\n"
"...\n"
msgstr ""

#: ../../toolchain/moon/coverage.md:36
msgid ""
"These files contain the information for the toolchain to determine which "
"parts of the program were executed, and which parts weren't."
msgstr "这些文件包含了工具链用于确定程序的哪些部分被执行，哪些部分没有被执行的信息。"

#: ../../toolchain/moon/coverage.md:40
msgid "Visualizing the coverage results"
msgstr "可视化覆盖率结果"

#: ../../toolchain/moon/coverage.md:42
msgid ""
"To visualize the result of coverage instrumentation, you'll need to use "
"the `moon coverage report` subcommand."
msgstr "要可视化覆盖率仪器的结果，您需要使用 `moon coverage report` 子命令。"

#: ../../toolchain/moon/coverage.md:45
msgid ""
"The subcommand can export the coverage in a number of formats, controlled"
" by the `-f` flag:"
msgstr "子命令可以以多种格式导出覆盖率，由 `-f` 标志控制："

#: ../../toolchain/moon/coverage.md:48
msgid "Text summary: `summary`"
msgstr "文字摘要：`summary`"

#: ../../toolchain/moon/coverage.md:49
msgid "OCaml Bisect format: `bisect` (default)"
msgstr "OCaml Bisect 格式：`bisect`（默认）"

#: ../../toolchain/moon/coverage.md:50
msgid "Coveralls JSON format: `coveralls`"
msgstr "Coveralls JSON 格式：`coveralls`"

#: ../../toolchain/moon/coverage.md:51
msgid "Cobertura XML format: `cobertura`"
msgstr "Coberura XML 格式：`cobertura`"

#: ../../toolchain/moon/coverage.md:52
msgid "HTML pages: `html`"
msgstr "HTML 页面：`html`"

#: ../../toolchain/moon/coverage.md:54
msgid "Text summary"
msgstr "文字摘要"

#: ../../toolchain/moon/coverage.md:56
msgid ""
"`moon coverage report -f summary` exports the coverage data into stdout, "
"printing the covered points and total coverage point count for each file."
msgstr "`moon coverage report -f summary` 将覆盖率数据导出到 stdout，打印每个文件的覆盖点和总覆盖点计数。"

#: ../../toolchain/moon/coverage.md:59
msgid ""
"$ moon coverage report -f summary\n"
"array/array.mbt: 21/22\n"
"array/array_nonjs.mbt: 3/3\n"
"array/blit.mbt: 3/3\n"
"array/deprecated.mbt: 0/0\n"
"array/fixedarray.mbt: 115/115\n"
"array/fixedarray_sort.mbt: 110/116\n"
"array/fixedarray_sort_by.mbt: 58/61\n"
"array/slice.mbt: 6/6\n"
"array/sort.mbt: 70/70\n"
"array/sort_by.mbt: 56/61\n"
"...\n"
msgstr ""

#: ../../toolchain/moon/coverage.md:74
msgid "OCaml Bisect format"
msgstr "OCaml Bisect 格式"

#: ../../toolchain/moon/coverage.md:76
msgid "This is the default format to export, if `-f` is not specified."
msgstr "这是未指定 `-f` 时的默认导出格式。"

#: ../../toolchain/moon/coverage.md:78
msgid ""
"`moon coverage report -f bisect` exports the coverage data into a file "
"`bisect.coverage` which can be read by [OCaml Bisect][bisect] tool."
msgstr ""
"`moon coverage report -f bisect` 将覆盖率数据导出到一个文件 `bisect.coverage`，可以被 "
"[OCaml Bisect][bisect] 工具读取。"

#: ../../toolchain/moon/coverage.md:83
msgid "Coveralls JSON format"
msgstr "Coveralls JSON 格式"

#: ../../toolchain/moon/coverage.md:85
msgid ""
"`moon coverage report -f coveralls` exports the coverage data into "
"Coverall's JSON format. This format is line-based, and can be read by "
"both Coveralls and CodeCov. You can find its specification "
"[here](https://docs.coveralls.io/api-introduction#json-format-web-data)."
msgstr ""
"`moon coverage report -f coveralls` 将覆盖率数据导出到 Coveralls 的 JSON "
"格式。这种格式是基于行的，可以被 Coveralls 和 CodeCov 读取。您可以在 "
"[这里](https://docs.coveralls.io/api-introduction#json-format-web-data) "
"找到其规范。"

#: ../../toolchain/moon/coverage.md:89
msgid ""
"$ moon coverage report -f coveralls\n"
"$ cat coveralls.json\n"
"{\n"
"    \"source_files\": [\n"
"        {\n"
"            \"name\": \"builtin/console.mbt\",\n"
"            \"source_digest\": \"1c24532e12ac5bdf34b7618c9f38bd82\",\n"
"            \"coverage\": [null,null,...,null,null]\n"
"        },\n"
"        {\n"
"            \"name\": \"immut/array/array.mbt\",\n"
"            \"source_digest\": \"bcf1fb1d2f143ebf4423565d5a57e84f\",\n"
"            \"coverage\": [null,null,null,...\n"
msgstr ""

#: ../../toolchain/moon/coverage.md:105
msgid ""
"You can directly send this coverage report to Coveralls or CodeCov using "
"the `--send-to` argument. The following is an example of using it in "
"GitHub Actions:"
msgstr ""
"您可以使用 `--send-to` 参数直接将此覆盖率报告发送到 Coveralls 或 CodeCov。以下是在 GitHub Actions "
"中使用它的示例："

#: ../../toolchain/moon/coverage.md:108
msgid ""
"moon coverage report \\\n"
"    -f coveralls \\\n"
"    -o codecov_report.json \\\n"
"    --service-name github \\\n"
"    --service-job-id \"$GITHUB_RUN_NUMBER\" \\\n"
"    --service-pull-request \"${{ github.event.number }}\" \\\n"
"    --send-to coveralls\n"
"\n"
"env:\n"
"    COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n"
msgstr ""

#: ../../toolchain/moon/coverage.md:121
msgid "More information can be found in `moon coverage report --help`."
msgstr "更多信息可以在 `moon coverage report --help` 中找到。"

#: ../../toolchain/moon/coverage.md:123
msgid "Cobertura XML format"
msgstr "Cobertura XML 格式"

#: ../../toolchain/moon/coverage.md:125
msgid ""
"`moon coverage report -f cobertura` exports the coverage data into a "
"format that can be read by "
"[Cobertura](https://cobertura.github.io/cobertura/)."
msgstr ""
"`moon coverage report -f cobertura` 将覆盖率数据导出到可以被 "
"[Cobertura](https://cobertura.github.io/cobertura/) 读取的格式。"

#: ../../toolchain/moon/coverage.md:127
msgid "HTML"
msgstr ""

#: ../../toolchain/moon/coverage.md:129
msgid ""
"`moon coverage report -f html` export the coverage data into a series of "
"human-readable HTML files. The default export location is the folder "
"named `_coverage`."
msgstr ""
"`moon coverage report -f html` 将覆盖率数据导出到一系列易于阅读的 HTML 文件中。默认的导出位置是名为 "
"`_coverage` 的文件夹。"

#: ../../toolchain/moon/coverage.md:132
msgid ""
"The `index.html` in the folder shows a list of all source files, as well "
"as the coverage percentage in them:"
msgstr "文件夹中的 `index.html` 显示了所有源文件的列表，以及其中的覆盖率百分比："

#: ../../toolchain/moon/coverage.md:135
msgid "![Index of the HTML](/imgs/coverage_html_index.png)"
msgstr "![HTML 的索引](/imgs/coverage_html_index.png)"

#: ../../toolchain/moon/coverage.md:135
msgid "Index of the HTML"
msgstr "HTML 的索引"

#: ../../toolchain/moon/coverage.md:137
msgid ""
"Clicking on each file shows the coverage detail within each file. Each "
"coverage point (start of branch) is represented by a highlighted "
"character in the source code: Red means the point is not covered among "
"all runs, and green means the point is covered in at least one run."
msgstr "单击每个文件会显示每个文件中的覆盖率详细信息。每个覆盖点（分支的开始）在源代码中由一个突出显示的字符表示：红色表示该点在所有运行中都没有被执行，绿色表示该点至少被执行一次。"

#: ../../toolchain/moon/coverage.md:143
msgid ""
"Each line is also highlighted by the coverage information, with the same "
"color coding. Additionally, yellow lines are those which has partial "
"coverage: some points in the line are covered, while others aren't."
msgstr "每行也通过覆盖率信息进行突出显示，具有相同的颜色编码。此外，黄色行是那些具有部分覆盖率的行：该行中的某些点被执行，而其他点没有被执行。"

#: ../../toolchain/moon/coverage.md:149
msgid ""
"Some lines will not have any highlight. This does not mean the line has "
"not been executed at all, just the line is not a start of a branch. Such "
"a line shares the coverage of closest covered the line before it."
msgstr "有些行不会有任何突出显示。这并不意味着该行根本没有被执行，只是该行不是分支的开始。这样的行共享其前面最近被执行的行的覆盖率。"

#: ../../toolchain/moon/coverage.md:154
msgid "![Detailed coverage data](/imgs/coverage_html_page.png)"
msgstr "![详细覆盖率数据](/imgs/coverage_html_page.png)"

#: ../../toolchain/moon/coverage.md:154
msgid "Detailed coverage data"
msgstr "详细覆盖率数据"

#: ../../toolchain/moon/coverage.md:156
msgid "Skipping coverage"
msgstr "跳过覆盖检查"

#: ../../toolchain/moon/coverage.md:158
msgid ""
"Adding the pragma `/// @coverage.skip` skips all coverage operations "
"within the function. Additionally, all deprecated functions will not be "
"covered."
msgstr "添加 `/// @coverage.skip` 指示符会跳过函数内的所有覆盖操作。此外，所有已弃用的函数都不会被检查。"

#: ../../toolchain/moon/index.md:1
msgid "Moon Build System"
msgstr "Moon 构建系统"

#: ../../toolchain/moon/module.md:1
msgid "Module Configuration"
msgstr "模块配置"

#: ../../toolchain/moon/module.md:3
msgid "moon uses the `moon.mod.json` file to identify and describe a module."
msgstr "moon 使用 `moon.mod.json` 文件来标识和描述一个模块。"

#: ../../toolchain/moon/module.md:6
msgid ""
"For the most up-to-date and complete JSON schema, please check [moon's "
"repository](https://github.com/moonbitlang/moon/blob/main/crates/moonbuild/template/mod.schema.json)."
msgstr ""
"访问 [moon "
"的仓库](https://github.com/moonbitlang/moon/blob/main/crates/moonbuild/template/mod.schema.json)"
" 查看最新最完整的 JSON 模式。"

#: ../../toolchain/moon/module.md:9 ../../toolchain/moon/package.md:5
msgid "Name"
msgstr "名称"

#: ../../toolchain/moon/module.md:11
msgid ""
"The `name` field is used to specify the name of the module, and it is "
"required."
msgstr "`name` 字段用于指定模块的名称，它是必需的。"

#: ../../toolchain/moon/module.md:13
msgid ""
"{\n"
"  \"name\": \"example\"\n"
"  // ...\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:20
msgid "The module name can contain letters, numbers, `_`, `-`, and `/`."
msgstr "模块名称可以包含字母、数字、`_`、`-` 和 `/`。"

#: ../../toolchain/moon/module.md:22
msgid ""
"For modules published to [mooncakes.io](https://mooncakes.io), the module"
" name must begin with the username. For example:"
msgstr "对于发布到 [mooncakes.io](https://mooncakes.io) 的模块，模块名称必须以用户名开头。例如："

#: ../../toolchain/moon/module.md:24
msgid ""
"{\n"
"  \"name\": \"moonbitlang/core\"\n"
"  // ...\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:31
msgid "Version"
msgstr "版本"

#: ../../toolchain/moon/module.md:33
msgid "The `version` field is used to specify the version of the module."
msgstr " `version` 字段用于指定模块的版本。"

#: ../../toolchain/moon/module.md:35
msgid ""
"This field is optional. For modules published to "
"[mooncakes.io](https://mooncakes.io), the version number must follow the "
"[Semantic Versioning 2.0.0](https://semver.org/spec/v2.0.0.html) "
"specification."
msgstr ""
"此字段是可选的。对于发布到 [mooncakes.io](https://mooncakes.io) 的模块，版本号必须遵循 [语义化版本 "
"2.0.0](https://semver.org/spec/v2.0.0.html) 规范。"

#: ../../toolchain/moon/module.md:37
msgid ""
"{\n"
"  \"name\": \"example\",\n"
"  \"version\": \"0.1.0\"\n"
"  // ...\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:45
msgid "Dependency Management"
msgstr "依赖管理"

#: ../../toolchain/moon/module.md:47
msgid "The `deps` field is used to specify the dependencies of the module."
msgstr "`deps` 字段用于指定模块的依赖项。"

#: ../../toolchain/moon/module.md:49
msgid "It is automatically managed by commands like `moon add` and `moon remove`."
msgstr "它由 `moon add` 和 `moon remove` 等命令自动管理。"

#: ../../toolchain/moon/module.md:51
msgid ""
"{\n"
"  \"name\": \"username/hello\",\n"
"  \"deps\": {\n"
"    \"moonbitlang/x\": \"0.4.6\"\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:60
msgid "You may also specify a local dependency, such as:"
msgstr "你也可以指定一个本地依赖，例如："

#: ../../toolchain/moon/module.md:62
msgid ""
"{\n"
"  \"name\": \"username/hello\",\n"
"  \"deps\": {\n"
"    \"username/other\": {\n"
"      \"path\": \"../other\"\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:73
msgid "Meta Information"
msgstr "元信息"

#: ../../toolchain/moon/module.md:75
msgid "README"
msgstr ""

#: ../../toolchain/moon/module.md:77
msgid ""
"The `readme` field is used to specify the path to the module's README "
"file."
msgstr "`readme` 字段用于指定模块的 README 文件的路径。"

#: ../../toolchain/moon/module.md:79
msgid "Repository"
msgstr "仓库"

#: ../../toolchain/moon/module.md:81
msgid ""
"The `repository` field is used to specify the URL of the module's "
"repository."
msgstr "`repository` 字段用于指定模块的仓库的 URL。"

#: ../../toolchain/moon/module.md:83
msgid "License"
msgstr "许可证"

#: ../../toolchain/moon/module.md:85
msgid ""
"The `license` field is used to specify the license of the module. The "
"license type must comply with the [SPDX License "
"List](https://spdx.org/licenses/)."
msgstr "`license` 字段用于指定模块的许可证。许可证类型必须符合 [SPDX 许可证列表](https://spdx.org/licenses/)。"

#: ../../toolchain/moon/module.md:87
msgid ""
"{\n"
"  \"license\": \"MIT\"\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:93
msgid "Keywords"
msgstr "关键字"

#: ../../toolchain/moon/module.md:95
msgid "The `keywords` field is used to specify the keywords for the module."
msgstr "`keywords` 字段用于指定模块的关键字。"

#: ../../toolchain/moon/module.md:97
msgid ""
"{\n"
"  \"keywords\": [\"example\", \"test\"]\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:103
msgid "Description"
msgstr "描述"

#: ../../toolchain/moon/module.md:105
msgid "The `description` field is used to specify the description of the module."
msgstr "`description` 字段用于指定模块的描述。"

#: ../../toolchain/moon/module.md:107
msgid ""
"{\n"
"  \"description\": \"This is a description of the module.\"\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:113
msgid "Include and Exclude"
msgstr "包含和排除"

#: ../../toolchain/moon/module.md:115
msgid ""
"The `include` and `exclude` fields are used to include or exclude "
"specific directories or files during publishing process."
msgstr " `include` 和 `exclude` 字段用于在发布过程中包含或排除特定的目录或文件。"

#: ../../toolchain/moon/module.md:117
msgid ""
"It follows the gitignore syntax, and include follows the exclude.  For "
"example, the following configuration will include the `build/assets`  but"
" exclude anything else in the `build` directory."
msgstr ""
"它遵循 gitignore 语法，并且包含的内容会覆盖排除的内容。例如，以下配置将包含 `build/assets` 但排除 `build` "
"目录中的其他内容。"

#: ../../toolchain/moon/module.md:121
msgid ""
"{\n"
"  \"exclude\": [\"build\"],\n"
"  \"include\": [\"build/assets\"]\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:128
#, fuzzy
msgid ""
"You may use [`moon package --list`](commands.md#moon-package) to verify "
"if the packaged result is expected."
msgstr "你可以使用 [`moon package --list`](commands#moon-package) 来验证打包结果是否符合预期。"

#: ../../toolchain/moon/module.md:130
msgid "Preferred Target"
msgstr "首选目标"

#: ../../toolchain/moon/module.md:132
msgid ""
"The `preferred-target` field allows the `moon` and the language server to"
" know which target should be used as the default target, avoiding the "
"necessity to write `--target` when developing a project targeting other "
"backends than Wasm GC."
msgstr ""
" `preferred-target` 字段允许 `moon` 和语言服务器知道应该使用哪个目标作为默认目标，从而避免在开发针对 Wasm GC "
"以外的其他后端的项目时需要传递 `--target`。"

#: ../../toolchain/moon/module.md:136
msgid ""
"{\n"
"  \"preferred-target\": \"js\"\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:142
msgid "Source directory"
msgstr "源目录"

#: ../../toolchain/moon/module.md:144
msgid "The `source` field is used to specify the source directory of the module."
msgstr "`source` 字段用于指定模块的源目录。"

#: ../../toolchain/moon/module.md:146
msgid ""
"It must be a subdirectory of the directory where the `moon.mod.json` file"
" is located and must be a relative path."
msgstr "它必须是 `moon.mod.json` 文件所在目录的子目录，并且必须是相对路径。"

#: ../../toolchain/moon/module.md:148
msgid ""
"When creating a module using the `moon new` command, a `src` directory "
"will be automatically generated, and the default value of the `source` "
"field will be `src`."
msgstr "当使用 `moon new` 命令创建一个模块时，将自动生成一个 `src` 目录，并且 `source` 字段的默认值将为 `src`。"

#: ../../toolchain/moon/module.md:150
msgid ""
"{\n"
"  \"source\": \"src\"\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:156
msgid ""
"When the `source` field does not exist, or its value is `null` or an "
"empty string `\"\"`, it is equivalent to setting `\"source\": \".\"`. "
"This means that the source directory is the same as the directory where "
"the `moon.mod.json` file is located."
msgstr ""
"如果 `source` 字段不存在，或其值为 `null` 或空字符串 `\"\"`，则等同于设置 `\"source\": "
"\".\"`。这意味着源目录与 `moon.mod.json` 文件所在目录相同。"

#: ../../toolchain/moon/module.md:158
msgid ""
"{\n"
"  \"source\": null\n"
"}\n"
"{\n"
"  \"source\": \"\"\n"
"}\n"
"{\n"
"  \"source\": \".\"\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:170 ../../toolchain/moon/package.md:377
msgid "Warning List"
msgstr "警告列表"

#: ../../toolchain/moon/module.md:172 ../../toolchain/moon/package.md:379
msgid "This is used to disable specific preset compiler warning numbers."
msgstr "这用于禁用特定的预设编译器警告编号。"

#: ../../toolchain/moon/module.md:174 ../../toolchain/moon/package.md:381
msgid ""
"For example, in the following configuration, `-2` disables the warning "
"number 2 (Unused variable)."
msgstr "例如，在以下配置中，`-2` 禁用警告编号 2（未使用的变量）。"

#: ../../toolchain/moon/module.md:176 ../../toolchain/moon/package.md:383
msgid ""
"{\n"
"  \"warn-list\": \"-2\"\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:182 ../../toolchain/moon/package.md:389
msgid ""
"If multiple warnings need to be disabled, they can be directly connected "
"and combined."
msgstr "如果需要禁用多种警告，可以直接连接起来进行组合。"

#: ../../toolchain/moon/module.md:184 ../../toolchain/moon/package.md:391
msgid ""
"{\n"
"  \"warn-list\": \"-2-4\"\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:190 ../../toolchain/moon/package.md:397
msgid ""
"If it is necessary to activate certain warnings that were originally "
"prohibited, use the plus sign."
msgstr "如果需要激活某种原来未启用的警告，则使用加号。"

#: ../../toolchain/moon/module.md:192 ../../toolchain/moon/package.md:399
msgid ""
"{\n"
"  \"warn-list\": \"+31\"\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:198 ../../toolchain/moon/package.md:405
msgid ""
"You can use `moonc build-package -warn-help` to see the list of preset "
"compiler warning numbers."
msgstr "你可以使用 `moonc build-package -warn-help` 来查看预设编译器警告编号列表。"

#: ../../toolchain/moon/module.md:200 ../../toolchain/moon/package.md:407
msgid ""
"$ moonc -v\n"
"v0.1.20250606+a3f4966ca\n"
"\n"
"$ moonc build-package -warn-help\n"
"Available warnings: \n"
"  1 Unused function.\n"
"  2 Unused variable.\n"
"  3 Unused type declaration.\n"
"  4 Unused abstract type.\n"
"  5 Unused type variable.\n"
"  6 Unused constructor.\n"
"  7 Unused field or constructor argument.\n"
"  8 Redundant modifier.\n"
"  9 Unused function declaration.\n"
" 10 Struct never constructed.\n"
" 11 Partial pattern matching.\n"
" 12 Unreachable code.\n"
" 13 Unresolved type variable.\n"
" 14 Lowercase type name.\n"
" 15 Unused mutability.\n"
" 16 Parser inconsistency.\n"
" 18 Useless loop expression.\n"
" 19 Top-level declaration is not left aligned.\n"
" 20 Invalid pragma\n"
" 21 Some arguments of constructor are omitted in pattern.\n"
" 22 Ambiguous block.\n"
" 23 Useless try expression.\n"
" 24 Useless error type.\n"
" 26 Useless catch all.\n"
" 27 Deprecated syntax.\n"
" 28 Todo\n"
" 29 Unused package.\n"
" 30 Empty package alias.\n"
" 31 Optional argument never supplied.\n"
" 32 Default value of optional argument never used.\n"
" 33 Unused import value\n"
" 35 Reserved keyword.\n"
" 36 Loop label shadows another label.\n"
" 37 Unused loop label.\n"
" 38 Useless guard.\n"
" 39 Duplicated method.\n"
" 40 Call a qualified method using regular call syntax.\n"
" 41 Closed map pattern.\n"
" 42 Invalid attribute.\n"
" 43 Unused attribute.\n"
" 44 Invalid inline-wasm.\n"
" 46 Useless `..` in pattern\n"
" 47 Invalid mbti file\n"
" 48 Trait method with default implementation not marked with `= _`\n"
" 49 Unused pub definition because it does not exist in mbti file.\n"
"  A all warnings\n"
msgstr ""

#: ../../toolchain/moon/module.md:254 ../../toolchain/moon/package.md:461
msgid "Alert List"
msgstr "警示列表"

#: ../../toolchain/moon/module.md:256 ../../toolchain/moon/package.md:463
msgid "Disable user preset alerts."
msgstr "禁用用户预设警示。"

#: ../../toolchain/moon/module.md:258 ../../toolchain/moon/package.md:465
msgid ""
"{\n"
"  \"alert-list\": \"-alert_1-alert_2\"\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:264
msgid "Scripts"
msgstr "脚本"

#: ../../toolchain/moon/module.md:266
msgid ""
"The `scripts` field is used to define custom scripts associated with the "
"module."
msgstr "`scripts` 字段用于定义与模块关联的自定义脚本。"

#: ../../toolchain/moon/module.md:268
msgid "postadd script"
msgstr "postadd 脚本"

#: ../../toolchain/moon/module.md:270
msgid ""
"The `postadd` script runs automatically after the module has been added. "
"When executed, the script's current working directory (cwd) is set to the"
" directory where the `moon.mod.json` file resides."
msgstr "`postadd` 脚本在模块添加后自动运行。执行时，脚本的当前工作目录（cwd）设置为 `moon.mod.json` 文件所在的目录。"

#: ../../toolchain/moon/module.md:274
msgid ""
"{\n"
"  \"scripts\": {\n"
"    \"postadd\": \"python3 build.py\"\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:282
msgid "\\[Experimental\\] Pre-build config script"
msgstr "\\[实验性\\] 预构建配置脚本"

#: ../../toolchain/moon/module.md:285
msgid ""
"This feature is extremely experimental, and its API may change at any "
"time. This documentation reflects the implementation as of 2025-06-03."
msgstr "这个功能是极其实验性的，其 API 可能随时发生变化。本文件反映了截至 2025-06-03 的实现。"

#: ../../toolchain/moon/module.md:290
msgid ""
"Using this feature may execute arbitrary code in your computer. Please "
"use with caution and only with trusted dependencies."
msgstr "使用此功能可能会在您的计算机上执行任意代码。请谨慎使用，仅与受信任的依赖项一起使用。"

#: ../../toolchain/moon/module.md:294
msgid ""
"The pre-build config script is added in order to aid native target "
"programming. To use such script, add your script in your `moon.mod.json`:"
msgstr "pre-build 配置脚本的添加是为了帮助本地目标编程。要使用此脚本，请在您的 `moon.mod.json` 中添加您的脚本："

#: ../../toolchain/moon/module.md:297
msgid ""
"{\n"
"  \"--moonbit-unstable-prebuild\": \"<path/to/build-script>\"\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:303
msgid ""
"The path is a relative path from the root of the project. The script may "
"either be a JavaScript script (with extension `.js`, `.cjs`, `.mjs`) "
"executed with `node`, or a Python script (with extension `.py`) executed "
"with `python3` or `python`."
msgstr ""
"路径是相对于项目根目录的相对路径。脚本可以是 JavaScript 脚本（扩展名为 `.js`、`.cjs`、`.mjs`）使用 `node` "
"执行，或者是 Python 脚本（扩展名为 `.py`）使用 `python3` 或 `python` 执行。"

#: ../../toolchain/moon/module.md:308
msgid "Input"
msgstr "输入"

#: ../../toolchain/moon/module.md:310
msgid ""
"The script will be provided with a JSON with the structure of "
"`BuildScriptEnvironment` from standard input stream (stdin):"
msgstr "脚本将从标准输入流（stdin）接收一个具有 `BuildScriptEnvironment` 结构的 JSON："

#: ../../toolchain/moon/module.md:313
msgid ""
"/** Represents the environment a build script receives */\n"
"interface BuildScriptEnvironment {\n"
"  env: Record<string, string>\n"
"  paths: Paths\n"
"}\n"
"\n"
"interface BuildInfo {\n"
"  /** The target info for the build script currently being run. */\n"
"  host: TargetInfo\n"
"  /** The target info for the module being built. */\n"
"  target: TargetInfo\n"
"}\n"
"\n"
"interface TargetInfo {\n"
"  /** The actual backend we're using, e.g. `wasm32`, `wasmgc`, `js`, `c`,"
" `llvm` */\n"
"  kind: string // TargetBackend\n"
"}\n"
msgstr ""
"/** 表示构建脚本接收的环境 */\n"
"interface BuildScriptEnvironment {\n"
"  env: Record<string, string>\n"
"  paths: Paths\n"
"}\n"
"\n"
"interface BuildInfo {\n"
"  /** 当前构建脚本正在运行的目标信息 */\n"
"  host: TargetInfo\n"
"  /** 正在构建的模块的目标信息 */\n"
"  target: TargetInfo\n"
"}\n"
"\n"
"interface TargetInfo {\n"
"  /** 我们正在使用的实际后端，例如 `wasm32`、`wasmgc`、`js`、`c`、`llvm` */\n"
"  kind: string // TargetBackend\n"
"}\n"

#: ../../toolchain/moon/module.md:333
msgid "Output"
msgstr "输出"

#: ../../toolchain/moon/module.md:335
msgid ""
"The script is expected to print a JSON string in its standard output "
"stream (stdout) with the structure of `BuildScriptOutput`:"
msgstr "脚本预计将在其标准输出流（stdout）中打印一个具有 `BuildScriptOutput` 结构的 JSON 字符串："

#: ../../toolchain/moon/module.md:338
msgid ""
"interface BuildScriptOutput {\n"
"  /** Build variables */\n"
"  vars?: Record<string, string>\n"
"  /** Configurations to linking */\n"
"  link_configs?: LinkConfig[]\n"
"}\n"
"\n"
"interface LinkConfig {\n"
"  /** The name of the package to configure */\n"
"  package: string\n"
"\n"
"  /** Link flags that needs to be propagated to dependents\n"
"   *\n"
"   * Reference: `cargo::rustc-link-arg=FLAG` */\n"
"  link_flags?: string\n"
"\n"
"  /** Libraries that need linking, propagated to dependents\n"
"   *\n"
"   * Reference: `cargo::rustc-link-lib=LIB` */\n"
"  link_libs?: string[]\n"
"\n"
"  /** Paths that needs to be searched during linking, propagated to "
"dependents\n"
"   *\n"
"   * Reference: `cargo::rustc-link-search=[KIND=]PATH` */\n"
"  link_search_paths?: string[]\n"
"}\n"
msgstr ""
"interface BuildScriptOutput {\n"
"  /** 构建变量 */\n"
"  vars?: Record<string, string>\n"
"  /** 链接配置 */\n"
"  link_configs?: LinkConfig[]\n"
"}\n"
"\n"
"interface LinkConfig {\n"
"  /** 要配置的包的名称 */\n"
"  package: string\n"
"\n"
"  /** 需要传播到依赖项的链接标志\n"
"   *\n"
"   * 参考：`cargo::rustc-link-arg=FLAG` */\n"
"  link_flags?: string\n"
"\n"
"  /** 需要链接的库，传播到依赖项\n"
"   *\n"
"   * 参考：`cargo::rustc-link-lib=LIB` */\n"
"  link_libs?: string[]\n"
"\n"
"  /** 需要在链接期间搜索的路径，传播到依赖项\n"
"   *\n"
"   * 参考：`cargo::rustc-link-search=[KIND=]PATH` */\n"
"  link_search_paths?: string[]\n"
"}\n"

#: ../../toolchain/moon/module.md:367
msgid "Build variables"
msgstr "构建变量"

#: ../../toolchain/moon/module.md:369
msgid ""
"You may use the variables emitted in the `vars` fields in the native "
"linking arguments in `moon.pkg.json` as `${build.<var_name>}`."
msgstr "您可以在 `moon.pkg.json` 的本地链接参数中使用 `vars` 字段中发出的变量，格式为 `${build.<var_name>}`。"

#: ../../toolchain/moon/module.md:372
msgid "For example, if your build script outputs:"
msgstr "例如，如果您的构建脚本输出："

#: ../../toolchain/moon/module.md:374
msgid "{ \"vars\": { \"CC\": \"gcc\" } }\n"
msgstr ""

#: ../../toolchain/moon/module.md:378
msgid "and your `moon.pkg.json` is structured like:"
msgstr "并且您的 `moon.pkg.json` 结构如下："

#: ../../toolchain/moon/module.md:380
msgid ""
"{\n"
"  \"link\": {\n"
"    \"native\": {\n"
"      \"cc\": \"${build.CC}\"\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/module.md:390
msgid "It will be transformed into"
msgstr "它会被转换为"

#: ../../toolchain/moon/module.md:392
msgid ""
"{\n"
"  \"link\": {\n"
"    \"native\": {\n"
"      \"cc\": \"gcc\"\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package.md:1
msgid "Package Configuration"
msgstr "包配置"

#: ../../toolchain/moon/package.md:3
msgid ""
"moon uses the `moon.pkg.json` file to identify and describe a package. "
"For full JSON schema, please check [moon's "
"repository](https://github.com/moonbitlang/moon/blob/main/crates/moonbuild/template/pkg.schema.json)."
msgstr ""
"moon 使用 `moon.pkg.json` 文件来标识和描述一个包。访问 [moon "
"的仓库](https://github.com/moonbitlang/moon/blob/main/crates/moonbuild/template/pkg.schema.json)"
" 查看完整的 JSON 模式。"

#: ../../toolchain/moon/package.md:7
msgid ""
"The package name is not configurable; it is determined by the directory "
"name of the package."
msgstr "包名称不可配置；它由包的文件夹目录名称确定。"

#: ../../toolchain/moon/package.md:9
msgid "is-main"
msgstr ""

#: ../../toolchain/moon/package.md:11
msgid ""
"The `is-main` field is used to specify whether a package needs to be "
"linked into an executable file."
msgstr "`is-main` 字段用于指定包是否需要链接为一个可执行文件。"

#: ../../toolchain/moon/package.md:13
msgid ""
"The output of the linking process depends on the backend. When this field"
" is set to `true`:"
msgstr "链接过程的输出取决于后端。当此字段设置为 `true` 时："

#: ../../toolchain/moon/package.md:15
msgid ""
"For the Wasm and `wasm-gc` backends, a standalone WebAssembly module will"
" be generated."
msgstr "对于 Wasm 和 `wasm-gc` 后端，将生成一个独立的 WebAssembly 模块。"

#: ../../toolchain/moon/package.md:16
msgid "For the `js` backend, a standalone JavaScript file will be generated."
msgstr "对于 `js` 后端，将生成一个独立的 JavaScript 文件。"

#: ../../toolchain/moon/package.md:18
msgid "Importing dependencies"
msgstr "导入依赖"

#: ../../toolchain/moon/package.md:20
msgid "import"
msgstr "导入"

#: ../../toolchain/moon/package.md:22
msgid ""
"The `import` field is used to specify other packages that a package "
"depends on."
msgstr "`import` 字段用于指定包依赖的其他包。"

#: ../../toolchain/moon/package.md:24
msgid ""
"For example, the following imports `moonbitlang/quickcheck` and "
"`moonbitlang/x/encoding`,  aliasing the latter to `lib` and importing the"
" function `encode` from the latter. User can write `@lib.encode` instead "
"of `encode`."
msgstr ""
"例如，以下导入了 `moonbitlang/quickcheck` 和 `moonbitlang/x/encoding`，将后者别名为 `lib`"
" 并从后者导入函数 `encode`。用户可以使用 `@lib.encode` 代替 `encode`。"

#: ../../toolchain/moon/package.md:28
msgid ""
"{\n"
"  \"import\": [\n"
"    \"moonbitlang/quickcheck\",\n"
"    { \"path\" : \"moonbitlang/x/encoding\", \"alias\": \"lib\", "
"\"value\": [\"encode\"] }\n"
"  ]\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package.md:37
msgid "test-import"
msgstr "测试导入"

#: ../../toolchain/moon/package.md:39
msgid ""
"The `test-import` field is used to specify other packages that the black-"
"box test package of this package depends on, with the same format as "
"`import`."
msgstr "`test-import` 字段用于指定此包的黑盒测试包依赖的其他包，配置语法与 `import` 相同"

#: ../../toolchain/moon/package.md:42
msgid ""
"The `test-import-all` field is used to specify whether all public "
"definitions from the package being tested should be imported (`true`) by "
"default."
msgstr "`test-import-all` 字段用于指定是否导入被测试包的公共定义（默认为 `true`）。"

#: ../../toolchain/moon/package.md:44
msgid "wbtest-import"
msgstr "白盒测试导入"

#: ../../toolchain/moon/package.md:46
msgid ""
"The `wbtest-import` field is used to specify other packages that the "
"white-box test package of this package depends on, with the same format "
"as `import`."
msgstr "`wbtest-import` 字段用于指定此包的白盒测试包依赖的其他包，配置语法与 `import` 相同。"

#: ../../toolchain/moon/package.md:49
msgid "Conditional Compilation"
msgstr "条件编译"

#: ../../toolchain/moon/package.md:51
msgid "The smallest unit of conditional compilation is a file."
msgstr "条件编译的最小单元是一个文件。"

#: ../../toolchain/moon/package.md:53
msgid ""
"In a conditional compilation expression, three logical operators are "
"supported: `and`, `or`, and `not`, where the `or` operator can be "
"omitted."
msgstr "在条件编译表达式中，支持三种逻辑运算符：`and`、`or` 和 `not`，其中 `or` 运算符可以省略。"

#: ../../toolchain/moon/package.md:55
msgid ""
"For example, `[\"or\", \"wasm\", \"wasm-gc\"]` can be simplified to "
"`[\"wasm\", \"wasm-gc\"]`."
msgstr "例如，`[\"or\", \"wasm\", \"wasm-gc\"]` 可以简化为 `[\"wasm\", \"wasm-gc\"]`。"

#: ../../toolchain/moon/package.md:57
msgid ""
"Conditions in the expression can be categorized into backends and "
"optimization levels:"
msgstr "表达式中的条件可以被归类为后端和优化层次："

#: ../../toolchain/moon/package.md:59
msgid "**Backend conditions**: `\"wasm\"`, `\"wasm-gc\"`, and `\"js\"`"
msgstr "**后端条件**：`\"wasm\"`、`\"wasm-gc\"` 和 `\"js\"`"

#: ../../toolchain/moon/package.md:60
msgid "**Optimization level conditions**: `\"debug\"` and `\"release\"`"
msgstr "**优化层次条件**：`\"debug\"` 和 `\"release\"`"

#: ../../toolchain/moon/package.md:62
msgid "Conditional expressions support nesting."
msgstr "条件表达式支持嵌套。"

#: ../../toolchain/moon/package.md:64
msgid ""
"If a file is not listed in `\"targets\"`, it will be compiled under all "
"conditions by default."
msgstr "如果文件未列在 `\"targets\"` 中，它将默认在所有条件下编译。"

#: ../../toolchain/moon/package.md:66
msgid "Example:"
msgstr "例如："

#: ../../toolchain/moon/package.md:68
msgid ""
"{\n"
"  \"targets\": {\n"
"    \"only_js.mbt\": [\"js\"],\n"
"    \"only_wasm.mbt\": [\"wasm\"],\n"
"    \"only_wasm_gc.mbt\": [\"wasm-gc\"],\n"
"    \"all_wasm.mbt\": [\"wasm\", \"wasm-gc\"],\n"
"    \"not_js.mbt\": [\"not\", \"js\"],\n"
"    \"only_debug.mbt\": [\"debug\"],\n"
"    \"js_and_release.mbt\": [\"and\", [\"js\"], [\"release\"]],\n"
"    \"js_only_test.mbt\": [\"js\"],\n"
"    \"js_or_wasm.mbt\": [\"js\", \"wasm\"],\n"
"    \"wasm_release_or_js_debug.mbt\": [\"or\", [\"and\", \"wasm\", "
"\"release\"], [\"and\", \"js\", \"debug\"]]\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package.md:85
msgid "Link Options"
msgstr "链接选项"

#: ../../toolchain/moon/package.md:87
msgid ""
"By default, moon only links packages where `is-main` is set to `true`. If"
" you need to link other packages, you can specify this with the `link` "
"option."
msgstr "默认情况下，moon 仅链接 `is-main` 设置为 `true` 的包。如果需要链接其他包，可以使用 `link` 选项指定。"

#: ../../toolchain/moon/package.md:89
msgid ""
"The `link` option is used to specify link options, and its value can be "
"either a boolean or an object."
msgstr "`link` 选项用于指定链接选项，其值可以是布尔值或对象。"

#: ../../toolchain/moon/package.md:91
msgid ""
"When the `link` value is `true`, it indicates that the package should be "
"linked. The output will vary depending on the backend specified during "
"the build."
msgstr "当 `link` 值为 `true` 时，表示应链接包。输出将根据构建时指定的后端而有所不同。"

#: ../../toolchain/moon/package.md:93
msgid ""
"{\n"
"  \"link\": true\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package.md:99
msgid ""
"When the `link` value is an object, it indicates that the package should "
"be linked, and you can specify link options. For detailed configuration, "
"please refer to the subpage for the corresponding backend."
msgstr "当 `link` 值为对象时，表示应链接包，您可以指定链接选项。有关详细配置，请参阅相应后端的子页面。"

#: ../../toolchain/moon/package.md:101
msgid "Wasm Backend Link Options"
msgstr "Wasm 后端链接选项"

#: ../../toolchain/moon/package.md:103
msgid "Common Options"
msgstr "共有选项"

#: ../../toolchain/moon/package.md:105
msgid ""
"The `exports` option is used to specify the function names exported by "
"the Wasm backend."
msgstr "`exports` 选项用于指定 Wasm 后端导出的函数名称。"

#: ../../toolchain/moon/package.md:107
msgid ""
"For example, in the following configuration, the `hello` function from "
"the current package is exported as the `hello` function in the Wasm "
"module, and the `foo` function is exported as the `bar` function in the "
"Wasm module. In the Wasm host, the `hello` and `bar` functions can be "
"called to invoke the `hello` and `foo` functions from the current "
"package."
msgstr ""
"例如，在以下配置中，当前包中的 `hello` 函数被导出为 `wasm` 模块中的 `hello` 函数，`foo` 函数被导出为 Wasm "
"模块中的 `bar` 函数。在 Wasm 宿主中，可以调用 `hello` 和 `bar` 函数来调用当前包中的 `hello` 和 `foo` "
"函数。"

#: ../../toolchain/moon/package.md:109
msgid ""
"{\n"
"  \"link\": {\n"
"    \"wasm\": {\n"
"      \"exports\": [\n"
"        \"hello\",\n"
"        \"foo:bar\"\n"
"      ]\n"
"    },\n"
"    \"wasm-gc\": {\n"
"      \"exports\": [\n"
"        \"hello\",\n"
"        \"foo:bar\"\n"
"      ]\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package.md:128
msgid ""
"The `import-memory` option is used to specify the linear memory imported "
"by the Wasm module."
msgstr "`import-memory` 选项用于指定 Wasm 模块导入的线性内存。"

#: ../../toolchain/moon/package.md:130
msgid ""
"For example, the following configuration specifies that the linear memory"
" imported by the Wasm module is the `memory` variable from the `env` "
"module."
msgstr "例如，以下配置指定 Wasm 模块导入的线性内存是 `env` 模块的 `memory` 变量。"

#: ../../toolchain/moon/package.md:132
msgid ""
"{\n"
"  \"link\": {\n"
"    \"wasm\": {\n"
"      \"import-memory\": {\n"
"        \"module\": \"env\",\n"
"        \"name\": \"memory\"\n"
"      }\n"
"    },\n"
"    \"wasm-gc\": {\n"
"      \"import-memory\": {\n"
"        \"module\": \"env\",\n"
"        \"name\": \"memory\"\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package.md:151
msgid ""
"The `export-memory-name` option is used to specify the name of the linear"
" memory exported by the Wasm module."
msgstr "`export-memory-name` 选项用于指定 Wasm 模块导出的线性内存的名称。"

#: ../../toolchain/moon/package.md:153
msgid ""
"{\n"
"  \"link\": {\n"
"    \"wasm\": {\n"
"      \"export-memory-name\": \"memory\"\n"
"    },\n"
"    \"wasm-gc\": {\n"
"      \"export-memory-name\": \"memory\"\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package.md:166
msgid "Wasm Linear Backend Link Options"
msgstr "Wasm 线性内存后端链接选项"

#: ../../toolchain/moon/package.md:168
msgid ""
"The `heap-start-address` option is used to specify the starting address "
"of the linear memory that can be used when compiling to the Wasm backend."
msgstr "`heap-start-address` 选项用于指定编译到 Wasm 后端时可以使用的线性内存的起始地址。"

#: ../../toolchain/moon/package.md:170
msgid ""
"For example, the following configuration sets the starting address of the"
" linear memory to 1024."
msgstr "例如，以下配置将线性内存的起始地址设置为 1024。"

#: ../../toolchain/moon/package.md:172
msgid ""
"{\n"
"  \"link\": {\n"
"    \"wasm\": {\n"
"      \"heap-start-address\": 1024\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package.md:182
msgid "Wasm GC Backend Link Options"
msgstr "Wasm GC 后端链接选项"

#: ../../toolchain/moon/package.md:184
msgid ""
"The `use-js-string-builtin` option is used to specify whether the [JS "
"String Builtin Proposal](https://github.com/WebAssembly/js-string-"
"builtins/blob/main/proposals/js-string-builtins/Overview.md) should be "
"enabled when compiling to the Wasm GC backend.  It will make the `String`"
" in MoonBit equivalent to the `String` in JavaScript host runtime."
msgstr ""
"`use-js-string-builtin` 选项用于指定在编译到 Wasm GC 后端时是否应启用 [内建 JS String "
"提案](https://github.com/WebAssembly/js-string-builtins/blob/main/proposals"
"/js-string-builtins/Overview.md)。它将使 MoonBit 中的 `String` 等效于 JavaScript "
"宿主运行时中的 `String`。"

#: ../../toolchain/moon/package.md:187
msgid "For example, the following configuration enables the JS String Builtin."
msgstr "例如，以下配置将启用内建 JS String 提案。"

#: ../../toolchain/moon/package.md:189
msgid ""
"{\n"
"  \"link\": {\n"
"    \"wasm-gc\": {\n"
"      \"use-js-builtin-string\": true\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package.md:199
msgid ""
"The `imported-string-constants` option is used to specify the imported "
"string namespace used by the JS String Builtin Proposal, which is \"_\" "
"by default. It should meet the configuration in the JS host runtime."
msgstr ""
"`imported-string-constants` 选项用于指定内建 JS String 提案使用的导入字符串命名空间，默认为 "
"`_`。它应符合 JS 宿主运行时中的配置。"

#: ../../toolchain/moon/package.md:202
msgid ""
"For example, the following configuration and JS initialization configures"
" the imported string namespace."
msgstr "例如，以下配置与 JS 初始化配置了导入字符串命名空间。"

#: ../../toolchain/moon/package.md:204
msgid ""
"{\n"
"  \"link\": {\n"
"    \"wasm-gc\": {\n"
"      \"use-js-builtin-string\": true,\n"
"      \"imported-string-constants\": \"_\"\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package.md:215
msgid ""
"const { instance } = await WebAssembly.instantiate(bytes, {}, { "
"importedStringConstants: \"strings\" });\n"
msgstr ""

#: ../../toolchain/moon/package.md:219
msgid "JS Backend Link Options"
msgstr "JS 后端链接选项"

#: ../../toolchain/moon/package.md:221
msgid ""
"The `exports` option is used to specify the function names to export in "
"the JavaScript module."
msgstr "`exports` 选项用于指定要在 JavaScript 模块中导出的函数名称。"

#: ../../toolchain/moon/package.md:223
msgid ""
"For example, in the following configuration, the `hello` function from "
"the current package is exported as the `hello` function in the JavaScript"
" module. In the JavaScript host, the `hello` function can be called to "
"invoke the `hello` function from the current package."
msgstr ""
"例如，在以下配置中，当前包中的 `hello` 函数被导出为 JavaScript 模块中的 `hello` 函数。在 JavaScript "
"宿主中，可以调用 `hello` 函数来调用当前包中的 `hello` 函数。"

#: ../../toolchain/moon/package.md:225
msgid ""
"{\n"
"  \"link\": {\n"
"    \"js\": {\n"
"      \"exports\": [\n"
"        \"hello\"\n"
"      ]\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package.md:237
msgid ""
"The `format` option is used to specify the output format of the "
"JavaScript module."
msgstr "`format` 选项用于指定 JavaScript 模块的输出格式。"

#: ../../toolchain/moon/package.md:239
msgid "The currently supported formats are:"
msgstr "目前支持的格式有："

#: ../../toolchain/moon/package.md:240
msgid "`esm` (default)"
msgstr "`esm`（默认）"

#: ../../toolchain/moon/package.md:241
msgid "`cjs`"
msgstr ""

#: ../../toolchain/moon/package.md:242
msgid "`iife`"
msgstr ""

#: ../../toolchain/moon/package.md:244
msgid ""
"For example, the following configuration sets the output format of the "
"current package to ES Module."
msgstr "例如，以下配置将当前包的输出格式设置为 ES 模块。"

#: ../../toolchain/moon/package.md:246
msgid ""
"{\n"
"  \"link\": {\n"
"    \"js\": {\n"
"      \"format\": \"esm\"\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package.md:256
msgid "Native Backend Link Options"
msgstr "原生后端链接选项"

#: ../../toolchain/moon/package.md:258
msgid ""
"The `cc` option is used to specify the compiler for compiling the "
"`moonc`-generated C source files. It can be either a full path to the "
"compiler or a simple name that is accessible via the PATH environment "
"variable."
msgstr ""
" `cc` 选项用于指定用于编译 `moonc` 生成的 C 源文件的编译器。它可以是编译器的完整路径，也可以是通过 PATH "
"环境变量可访问的简单名称。"

#: ../../toolchain/moon/package.md:261
msgid ""
"{\n"
"  \"link\": {\n"
"    \"native\": {\n"
"      \"cc\": \"/usr/bin/gcc13\"\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package.md:271
msgid ""
"The `cc-flags` option is used to override the default flags passed to the"
" compiler. For example, you can use the following flag to define a macro "
"called MOONBIT."
msgstr "`cc-flags` 选项用于覆盖传递给编译器的默认标志。例如，您可以使用以下标志来定义一个名为 MOONBIT 的宏。"

#: ../../toolchain/moon/package.md:274
msgid ""
"{\n"
"  \"link\": {\n"
"    \"native\": {\n"
"      \"cc-flags\": \"-DMOONBIT\"\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package.md:284
msgid ""
"The `cc-link-flags` option is used to override the default flags passed "
"to the linker. Since the linker is invoked through the compiler driver "
"(e.g., `cc` instead of `ld`, `cl` instead of `link`), you should prefix "
"specific options with `-Wl,` or `/link ` when passing them."
msgstr ""
"`cc-link-flags` 选项用于覆盖传递给链接器的默认标志。由于链接器是通过编译器驱动程序调用的（例如，通过 `cc` 而不是 "
"`ld`，通过 `cl` 而不是 `link`），因此在传递特定选项时，应该使用 `-Wl,` 或 `/link ` 前缀。"

#: ../../toolchain/moon/package.md:288
msgid "The following example strips symbol information from produced binary."
msgstr "以下示例从生成的二进制文件中剥离符号信息。"

#: ../../toolchain/moon/package.md:290
msgid ""
"{\n"
"  \"link\": {\n"
"    \"native\": {\n"
"      \"cc-link-flags\": \"-s\"\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package.md:300
msgid ""
"The `stub-cc` option is similar to `cc` but controls which compiler to "
"use for compiling stubs. Although it can be different from `cc`, it is "
"not recommended and should only be used for debugging purposes. "
"Therefore, we strongly recommend to specify `cc` and `stub-cc` at the "
"same time and make them consistent to avoid potential conflicts."
msgstr ""
"`stub-cc` 选项与 `cc` 类似，但控制用于编译存根的编译器。虽然它可以与 `cc` "
"不同，但不建议这样做，应仅用于调试目的。因此，我们强烈建议同时指定 `cc` 和 `stub-cc` 并使它们保持一致，以避免潜在冲突。"

#: ../../toolchain/moon/package.md:305
msgid ""
"The `stub-cc-flags` is similar to `cc-flags`. It only have effects on "
"stubs compilation."
msgstr "`stub-cc-flags` 选项类似于 `cc-flags`。它仅对存根编译有效。"

#: ../../toolchain/moon/package.md:307
msgid ""
"The `stub-cc-link-flags` are similar but have a subtle difference.  "
"Normally, stubs are compiled into object files and linked against object "
"files generated from `moonc`-generated C source files.  This linking is "
"only controlled by `cc-flags` and `cc-link-flags`, as mentioned earlier."
"  However, in specific modes, such as when the fast-debugging-test "
"feature is enabled, there will be a separate linking procedure for stub "
"objects files, where  `stub-cc-link-flags` will take effect."
msgstr ""
"`stub-cc-link-flags` 与 `cc-link-flags` 类似，但有微妙的区别。通常，存根被编译为目标文件，并与从 "
"`moonc` 生成的 C 源文件的目标文件链接。这种链接仅由前面提到的 `cc-flags` 和 `cc-link-flags` "
"控制。然而，在特定模式下，存根目标文件将有一个单独的链接过程，在该过程中，`stub-cc-link-flags` 将生效。"

#: ../../toolchain/moon/package.md:314
msgid "Default C compiler and compiler flags for the native backend"
msgstr "原生后端的默认 C 编译器和编译器标志"

#: ../../toolchain/moon/package.md:316
msgid ""
"Here is a brief summarization to "
"[compiler_flags.rs](https://github.com/moonbitlang/moon/blob/main/crates/moonutil/src/compiler_flags.rs)"
msgstr ""
"以下是对 "
"[compiler_flags.rs](https://github.com/moonbitlang/moon/blob/main/crates/moonutil/src/compiler_flags.rs)"
" 的简要总结。"

#: ../../toolchain/moon/package.md:318
msgid "C Compiler"
msgstr "C 编译器"

#: ../../toolchain/moon/package.md:320
msgid "Search in PATH for the following items from top to bottom."
msgstr "在 PATH 中从上到下搜索以下项目。"

#: ../../toolchain/moon/package.md:322
msgid "cl"
msgstr ""

#: ../../toolchain/moon/package.md:323
msgid "gcc"
msgstr ""

#: ../../toolchain/moon/package.md:324
msgid "clang"
msgstr ""

#: ../../toolchain/moon/package.md:325
msgid "cc"
msgstr ""

#: ../../toolchain/moon/package.md:326
msgid "the internal tcc"
msgstr "内部的 tcc"

#: ../../toolchain/moon/package.md:328
msgid ""
"For GCC-like compilers, the default compile & link command is as follows."
" `[]` is used to indicate the flags may not exist in some modes."
msgstr "对于类似 GCC 的编译器，默认的编译和链接命令如下。`[]` 用于指示某些模式下可能不存在的标志。"

#: ../../toolchain/moon/package.md:330
msgid ""
"cc -o $target -I$MOON_HOME/include -L$MOON_HOME/lib [-g] [-shared -fPIC] "
"\\\n"
"   -fwrapv -fno-strict-aliasing (-O2|-Og) "
"[$MOON_HOME/lib/libmoonbitrun.o] \\\n"
"   $sources -lm $cc_flags $cc_link_flags\n"
msgstr ""

#: ../../toolchain/moon/package.md:336
msgid "For MSVC, the default compile & link command is as follows."
msgstr "对于 MSVC，默认的编译和链接命令如下。"

#: ../../toolchain/moon/package.md:337
msgid ""
"cl (/Fo|/Fe)$target -I$MOON_HOME/include [/LD] /utf-8 /wd4819 /nologo "
"(/O2|/Od) \\\n"
"   /link /LIBPATH:$MOON_HOME/lib\n"
msgstr ""

#: ../../toolchain/moon/package.md:342
msgid "Pre-build"
msgstr "预构建"

#: ../../toolchain/moon/package.md:344
msgid ""
"The `\"pre-build\"` field is used to specify pre-build commands, which "
"will be executed before build commands such as `moon check|build|test`."
msgstr "`pre-build` 字段用于指定预构建命令，这些命令将在构建命令（如 `moon check|build|test`）之前执行。"

#: ../../toolchain/moon/package.md:346
msgid ""
"`\"pre-build\"` is an array, where each element is an object containing "
"`input`, `output`, and `command` fields. The `input` and `output` fields "
"can be strings or arrays of strings, while the `command` field is a "
"string. In the `command`, you can use any shell commands, as well as the "
"`$input` and `$output` variables, which represent the input and output "
"files, respectively. If these fields are arrays, they will be joined with"
" spaces by default."
msgstr ""
"`\"pre-build\"` 是一个数组，其中每个元素是一个包含 `input`、`output` 和 `command` "
"字段的对象。`input` 和 `output` 字段可以是字符串或字符串数组，而 `command` 字段是一个字符串。在 `command` "
"中，可以使用任何 shell 命令，以及分别表示输入和输出文件的 `$input` 和 `$output` "
"变量。如果这些字段是数组，它们将默认使用空格连接。"

#: ../../toolchain/moon/package.md:348
msgid ""
"Currently, there is a built-in special command `:embed`, which converts "
"files into MoonBit source code. The `--text` parameter is used to embed "
"text files, and `--binary` is used for binary files. `--text` is the "
"default and can be omitted. The `--name` parameter is used to specify the"
" generated variable name, with `resource` being the default. The command "
"is executed in the directory where the `moon.pkg.json` file is located."
msgstr ""
"目前，内置了一个特殊命令 `:embed`，它将文件转换为 MoonBit 源代码。`--text` 参数用于嵌入文本文件，`--binary` "
"用于二进制文件。`--text` 是默认值，可以省略。`--name` 参数用于指定生成的变量名，默认为 `resource`。该命令在 "
"`moon.pkg.json` 文件所在的目录中执行。"

#: ../../toolchain/moon/package.md:350
msgid ""
"{\n"
"  \"pre-build\": [\n"
"    {\n"
"      \"input\": \"a.txt\",\n"
"      \"output\": \"a.mbt\",\n"
"      \"command\": \":embed -i $input -o $output\"\n"
"    }\n"
"  ]\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package.md:362
msgid "If the content of `a.txt` in the current package directory is:"
msgstr "如果当前包目录中 `a.txt` 的内容为："

#: ../../toolchain/moon/package.md:363
msgid ""
"hello,\n"
"world\n"
msgstr ""

#: ../../toolchain/moon/package.md:368
msgid ""
"After running `moon build`, the following `a.mbt` file will be generated "
"in the directory where the `moon.pkg.json` is located:"
msgstr "那么在 `moon.pkg.json` 所在目录中运行 `moon build` 后，将生成以下 `a.mbt` 文件："

#: ../../toolchain/moon/package.md:370
msgid ""
"let resource : String =\n"
"  #|hello,\n"
"  #|world\n"
"  #|\n"
msgstr ""

#: ../../toolchain/moon/package.md:471
msgid "Virtual Package"
msgstr "虚拟包"

#: ../../toolchain/moon/package.md:473
msgid ""
"A virtual package serves as an interface of a package that can be "
"replaced by actual implementations."
msgstr "一个虚拟包可以作为一个包的接口被实际的实现替换。"

#: ../../toolchain/moon/package.md:475
msgid "Declarations"
msgstr "声明"

#: ../../toolchain/moon/package.md:477
msgid ""
"The `virtual` field is used to declare the current package as a virtual "
"package."
msgstr "`virtual` 字段用于将当前包声明为虚拟包。"

#: ../../toolchain/moon/package.md:479
msgid ""
"For example, the following declares a virtual package with default "
"implementation:"
msgstr "例如，以下配置声明了一个具有默认实现的虚拟包："

#: ../../toolchain/moon/package.md:481
msgid ""
"{\n"
"  \"virtual\": {\n"
"    \"has-default\": true\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package.md:489
msgid "Implementations"
msgstr "实现"

#: ../../toolchain/moon/package.md:491
msgid ""
"The `implement` field is used to declare the virtual package to be "
"implemented by the current package."
msgstr "`implement` 字段用于指定当前包实现的虚拟包。"

#: ../../toolchain/moon/package.md:493
msgid "For example, the following implements a virtual package:"
msgstr "例如，以下配置实现了一个虚拟包："

#: ../../toolchain/moon/package.md:495
msgid ""
"{\n"
"  \"implement\": \"moonbitlang/core/abort\"\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package.md:501
msgid "Overriding implementations"
msgstr "覆盖实现"

#: ../../toolchain/moon/package.md:503
msgid ""
"The `overrides` field is used to provide the implementations that "
"fulfills an imported virtual package."
msgstr "`overrides` 字段用于提供满足导入虚拟包的实现。"

#: ../../toolchain/moon/package.md:505
msgid ""
"For example, the following overrides the default implementation of the "
"builtin abort package with another package:"
msgstr "例如，以下配置将内置的 abort 包的默认实现替换为另一个包："

#: ../../toolchain/moon/package.md:507
msgid ""
"{\n"
"  \"overrides\": [\"moonbitlang/dummy_abort/abort_show_msg\"]\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package-manage-tour.md:1
msgid "MoonBit's Package Manager Tutorial"
msgstr "MoonBit 包管理教程"

#: ../../toolchain/moon/package-manage-tour.md:3
msgid "Overview"
msgstr "概述"

#: ../../toolchain/moon/package-manage-tour.md:5
msgid ""
"MoonBit's build system seamlessly integrates package management and "
"documentation generation tools, allowing users to easily fetch "
"dependencies from mooncakes.io, access module documentation, and publish "
"new modules."
msgstr "MoonBit 的构建系统无缝集成了包管理和文档生成工具，使用户可以轻松从 mooncakes.io 获取依赖项，访问模块文档，并发布新模块。"

#: ../../toolchain/moon/package-manage-tour.md:7
msgid ""
"[mooncakes.io](https://mooncakes.io/) is a centralized package management"
" platform. Each module has a corresponding configuration file "
"`moon.mod.json`, which is the smallest unit for publishing. Under the "
"module's path, there can be multiple packages, each corresponding to a "
"`moon.pkg.json` configuration file. The `.mbt` files at the same level as"
" `moon.pkg.json` belong to this package."
msgstr ""
"[mooncakes.io](https://mooncakes.io/) "
"是一个集中式包管理平台。模块是发布的最小单元。每个模块都有一个对应的配置文件 "
"`moon.mod.json`，在模块的路径下，可以有多个包，每个包对应一个 `moon.pkg.json` 配置文件。与 "
"`moon.pkg.json` 同级的 `.mbt` 文件属于此包。"

#: ../../toolchain/moon/package-manage-tour.md:9
msgid ""
"Before getting started, make sure you have installed "
"[moon](https://www.moonbitlang.com/download/)."
msgstr "在开始之前，请确保你已经安装了 [moon](https://www.moonbitlang.com/download/)。"

#: ../../toolchain/moon/package-manage-tour.md:11
msgid "Setup mooncakes.io account"
msgstr "设置 mooncakes.io 账户"

#: ../../toolchain/moon/package-manage-tour.md:14
msgid "If you don't want to publish, you can skip this step."
msgstr "如果你不需要发布，可以跳过此步骤。"

#: ../../toolchain/moon/package-manage-tour.md:17
msgid ""
"If you don't have an account on mooncakes.io, run `moon register` and "
"follow the guide. If you have previously registered an account, you can "
"use `moon login` to log in."
msgstr ""
"如果你没有 mooncakes.io 账户，请运行 `moon register` 并按照指南操作。如果你之前注册过账户，可以使用 `moon "
"login` 登录。"

#: ../../toolchain/moon/package-manage-tour.md:19
msgid ""
"When you see the following message, it means you have successfully logged"
" in:"
msgstr "当你看到以下消息时，表示你已成功登录："

#: ../../toolchain/moon/package-manage-tour.md:21
msgid "API token saved to ~/.moon/credentials.json\n"
msgstr ""

#: ../../toolchain/moon/package-manage-tour.md:25
msgid "Update index"
msgstr "更新索引"

#: ../../toolchain/moon/package-manage-tour.md:27
msgid "Use `moon update` to update the mooncakes.io index."
msgstr "使用 `moon update` 来更新 mooncakes.io 索引。"

#: ../../toolchain/moon/package-manage-tour.md:29
msgid "![moon update cli](/imgs/moon-update.png)"
msgstr ""

#: ../../toolchain/moon/package-manage-tour.md:29
msgid "moon update cli"
msgstr ""

#: ../../toolchain/moon/package-manage-tour.md:31
msgid "Setup MoonBit project"
msgstr "设置 MoonBit 项目"

#: ../../toolchain/moon/package-manage-tour.md:33
msgid "Open an existing project or create a new project via `moon new`:"
msgstr "打开现有项目或通过 `moon new` 创建一个新项目："

#: ../../toolchain/moon/package-manage-tour.md:35
msgid "![moon new](/imgs/moon-new.png)"
msgstr ""

#: ../../toolchain/moon/package-manage-tour.md:35
msgid "moon new"
msgstr ""

#: ../../toolchain/moon/package-manage-tour.md:37
msgid "Add dependencies"
msgstr "添加依赖"

#: ../../toolchain/moon/package-manage-tour.md:39
msgid ""
"You can browse all available modules on mooncakes.io. Use `moon add` to "
"add the dependencies you need, or manually edit the `deps` field in "
"`moon.mod.json`."
msgstr ""
"你可以在 mooncakes.io 上浏览所有可用的模块。使用 `moon add` 来添加你需要的依赖，或手动编辑 "
"`moon.mod.json` 中的 `deps` "

#: ../../toolchain/moon/package-manage-tour.md:41
msgid ""
"For example, to add the latest version of the `Yoorkin/example/list` "
"module:"
msgstr "例如，要添加 `Yoorkin/example/list` 模块的最新版本："

#: ../../toolchain/moon/package-manage-tour.md:43
msgid "![add deps](/imgs/add-deps.png)"
msgstr ""

#: ../../toolchain/moon/package-manage-tour.md:43
msgid "add deps"
msgstr ""

#: ../../toolchain/moon/package-manage-tour.md:45
msgid "Import packages from module"
msgstr "从模块导入包"

#: ../../toolchain/moon/package-manage-tour.md:47
msgid ""
"Modify the configuration file `moon.pkg.json` and declare the packages "
"that need to be imported in the `import` field."
msgstr "修改配置文件 `moon.pkg.json` 并在 `import` 字段中声明需要导入的包。"

#: ../../toolchain/moon/package-manage-tour.md:49
msgid ""
"For example, in the image below, the `hello/main/moon.pkg.json` file is "
"modified to declare the import of `Yoorkin/example/list` in the `main` "
"package. Now, you can call the functions of the third-party package in "
"the `main` package using `@list`."
msgstr ""
"例如，在下面的图片中，`hello/main/moon.pkg.json` 文件被修改，声明了在 `main` 包中导入 "
"`Yoorkin/example/list`。现在，你可以在 `main` 包中使用 `@list` 调用第三方包的函数。"

#: ../../toolchain/moon/package-manage-tour.md:51
msgid "![import package](/imgs/import.png)"
msgstr ""

#: ../../toolchain/moon/package-manage-tour.md:51
msgid "import package"
msgstr ""

#: ../../toolchain/moon/package-manage-tour.md:53
msgid "You can also give an alias to the imported package:"
msgstr "你还可以给导入的包起一个别名："

#: ../../toolchain/moon/package-manage-tour.md:55
msgid ""
"{\n"
"    \"is_main\": true,\n"
"    \"import\": [\n"
"        { \"path\": \"Yoorkin/example/list\", \"alias\": \"ls\" }\n"
"    ]\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package-manage-tour.md:64
msgid ""
"Read the documentation of this module on mooncakes.io, we can use its "
"`of_array` and `reverse` functions to implement a new function "
"`reverse_array`."
msgstr ""
"在 mooncakes.io 上阅读此模块的文档，我们可以使用其 `of_array` 和 `reverse` 函数来实现一个新函数 "
"`reverse_array`。"

#: ../../toolchain/moon/package-manage-tour.md:66
msgid "![reverse array](/imgs/reverse-array.png)"
msgstr ""

#: ../../toolchain/moon/package-manage-tour.md:66
msgid "reverse array"
msgstr ""

#: ../../toolchain/moon/package-manage-tour.md:68
msgid "Remove dependencies"
msgstr "移除依赖"

#: ../../toolchain/moon/package-manage-tour.md:70
msgid "You can remove dependencies via `moon remove <module name>`."
msgstr "你可以通过 `moon remove <模块名>` 移除依赖。"

#: ../../toolchain/moon/package-manage-tour.md:72
msgid "Publish your module"
msgstr "发布你的模块"

#: ../../toolchain/moon/package-manage-tour.md:74
msgid ""
"If you are ready to share your module, use `moon publish` to push a "
"module to mooncakes.io. There are some important considerations to keep "
"in mind before publishing:"
msgstr "如果你准备分享你的模块，使用 `moon publish` 将模块推送到 mooncakes.io。在发布之前有一些重要的注意事项需要记住："

#: ../../toolchain/moon/package-manage-tour.md:77
msgid "Semantic versioning convention"
msgstr "语义化版本约定"

#: ../../toolchain/moon/package-manage-tour.md:79
msgid ""
"MoonBit's package management follows the convention of [Semantic "
"Versioning](https://semver.org/). Each module must define a version "
"number in the format `MAJOR.MINOR.PATCH`. With each push, the module must"
" increment the:"
msgstr ""
"MoonBit 的包管理遵循 [语义化版本](https://semver.org/) 约定。每个模块必须以 "
"`MAJOR.MINOR.PATCH` 格式定义一个版本号。每次推送，模块必须递增："

#: ../../toolchain/moon/package-manage-tour.md:81
msgid "MAJOR version when you make incompatible API changes"
msgstr "当你进行不兼容的 API 更改时，递增 MAJOR 版本"

#: ../../toolchain/moon/package-manage-tour.md:82
msgid "MINOR version when you add functionality in a backward compatible manner"
msgstr "在向后兼容的方式下添加功能时，递增 MINOR 版本"

#: ../../toolchain/moon/package-manage-tour.md:83
msgid "PATCH version when you make backward compatible bug fixes"
msgstr "在进行向后兼容的错误修复时，递增 PATCH 版本"

#: ../../toolchain/moon/package-manage-tour.md:85
msgid ""
"Additional labels for pre-release and build metadata are available as "
"extensions to the `MAJOR.MINOR.PATCH` format."
msgstr "附加的预发布和构建元数据标签可作为 `MAJOR.MINOR.PATCH` 格式的扩展。"

#: ../../toolchain/moon/package-manage-tour.md:87
msgid ""
"moon implements the [minimal version "
"selection](https://research.swtch.com/vgo-mvs), which automatically "
"handles and installs dependencies based on the module's semantic "
"versioning information. Minimal version selection assumes that each "
"module declares its own dependency requirements and follows semantic "
"versioning convention, aiming to make the user's dependency graph as "
"close as possible to the author's development-time dependencies."
msgstr ""
"moon 实现了 [最小版本选择](https://research.swtch.com/vgo-"
"mvs)，根据模块的语义化版本信息自动处理和安装依赖。最小版本选择假定每个模块声明自己的依赖要求，并遵循语义化版本约定，旨在使用户的依赖图尽可能接近作者的开发时依赖。"

#: ../../toolchain/moon/package-manage-tour.md:89
msgid "Readme & metadata"
msgstr "自述文件 & 元数据"

#: ../../toolchain/moon/package-manage-tour.md:91
msgid "Metadata in `moon.mod.json` and `README.md` will be shown in mooncakes.io."
msgstr "`moon.mod.json` 和 `README.md` 中的元数据将显示在 mooncakes.io 上。"

#: ../../toolchain/moon/package-manage-tour.md:93
msgid "Metadata consist of the following sections:"
msgstr "元数据包括以下部分："

#: ../../toolchain/moon/package-manage-tour.md:95
msgid ""
"`license`: license of this module, it following the "
"[SPDX](https://spdx.dev/about/overview/) convention"
msgstr "`license`：此模块的许可证，遵循 [SPDX](https://spdx.dev/about/overview/) 约定"

#: ../../toolchain/moon/package-manage-tour.md:96
msgid "`keywords`: keywords of this module"
msgstr "`keywords`：此模块的关键字"

#: ../../toolchain/moon/package-manage-tour.md:97
msgid "`repository`: URL of the package source repository"
msgstr "`repository`：包源代码仓库的 URL"

#: ../../toolchain/moon/package-manage-tour.md:98
msgid "`description`: short description to this module"
msgstr "`description`：此模块的简短描述"

#: ../../toolchain/moon/package-manage-tour.md:99
msgid "`homepage`: URL of the module homepage"
msgstr "`homepage`：模块主页的 URL"

#: ../../toolchain/moon/package-manage-tour.md:101
msgid "Moondoc"
msgstr "Moondoc"

#: ../../toolchain/moon/package-manage-tour.md:103
msgid "mooncakes.io will generate documentation for each module automatically."
msgstr "mooncakes.io 将自动生成每个模块的文档。"

#: ../../toolchain/moon/package-manage-tour.md:105
msgid ""
"The leading `///` comments of each toplevel will be recognized as "
"documentation. You can write markdown inside."
msgstr "每个顶级的 `///` 注释将被识别为文档。你可以在其中写 markdown。"

#: ../../toolchain/moon/package-manage-tour.md:108
msgid ""
"/// Get the largest element of a non-empty `Array`.\n"
"///\n"
"/// # Example\n"
"///\n"
"/// ```\n"
"/// maximum([1,2,3,4,5,6]) = 6\n"
"/// ```\n"
"///\n"
"/// # Panics\n"
"///\n"
"/// Panics if the `xs` is empty.\n"
"///\n"
"pub fn maximum[T : Compare](xs : Array[T]) -> T {\n"
"  // TODO ...\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/package-manage-tour.md:126
msgid ""
"You can also use `moon doc --serve` to generate and view documentation "
"locally."
msgstr "你也可以使用 `moon doc --serve` 来生成并在本地查看文档。"

#: ../../toolchain/moon/tutorial.md:1
msgid "MoonBit's Build System Tutorial"
msgstr "MoonBit 构建系统教程"

#: ../../toolchain/moon/tutorial.md:3
msgid ""
"Moon is the build system for the MoonBit language, currently based on the"
" [n2](https://github.com/evmar/n2) project. Moon supports parallel and "
"incremental builds. Additionally, moon also supports managing and "
"building third-party packages on [mooncakes.io](https://mooncakes.io/)"
msgstr ""
"Moon 是 MoonBit 语言的构建系统，目前基于 [n2](https://github.com/evmar/n2) 项目。Moon "
"支持并行和增量构建。此外，moon 还在 [mooncakes.io](https://mooncakes.io/) 上管理和构建第三方包。"

#: ../../toolchain/moon/tutorial.md:5
msgid "Prerequisites"
msgstr "先决条件"

#: ../../toolchain/moon/tutorial.md:7
msgid ""
"Before you begin with this tutorial, make sure you have installed the "
"following:"
msgstr "在开始本教程之前，请确保你已安装以下内容："

#: ../../toolchain/moon/tutorial.md:9
msgid ""
"**MoonBit CLI Tools**: Download it from the "
"<https://www.moonbitlang.com/download/>. This command line tool is needed"
" for creating and managing MoonBit projects."
msgstr ""
"**MoonBit CLI 工具**：从 <https://www.moonbitlang.cn/download/> "
"下载。这个命令行工具用于创建和管理 MoonBit 项目。"

#: ../../toolchain/moon/tutorial.md:11
msgid "Use `moon help` to view the usage instructions."
msgstr "使用 `moon help` 查看使用说明。"

#: ../../toolchain/moon/tutorial.md:13
msgid ""
"$ moon help\n"
"...\n"
msgstr ""

#: ../../toolchain/moon/tutorial.md:18
msgid ""
"**MoonBit Language** plugin in Visual Studio Code: You can install it "
"from the VS Code marketplace. This plugin provides a rich development "
"environment for MoonBit, including functionalities like syntax "
"highlighting, code completion, and more."
msgstr ""
"Visual Studio Code 中的 **MoonBit 语言** 插件：你可以从 VS Code 市场安装。此插件为 MoonBit "
"提供了丰富的开发环境，包括语法高亮、代码补全等功能。"

#: ../../toolchain/moon/tutorial.md:20
msgid ""
"Once you have these prerequisites fulfilled, let's start by creating a "
"new MoonBit module."
msgstr "一旦你满足了这些先决条件，我们就可以开始创建一个新的 MoonBit 模块。"

#: ../../toolchain/moon/tutorial.md:22
msgid "Creating a New Module"
msgstr "创建一个新模块"

#: ../../toolchain/moon/tutorial.md:24
msgid ""
"To create a new module, enter the `moon new <path>` command in the "
"terminal, where the path is the directory that you'd like to put the "
"project, and you will see the module being created. By using all the "
"default values, you can create a new module named `username/my_project` "
"in the `my_project` directory."
msgstr ""
"要创建一个新模块，在终端中输入 `moon new <path>` 命令，其中 path "
"是你想要创建项目的文件夹目录，之后项目会被创建。使用默认值，你会在 `my_project` 目录中创建一个名为 "
"`username/my_project` 的新模块。"

#: ../../toolchain/moon/tutorial.md:26
msgid ""
"$ moon new my_project\n"
"Initialized empty Git repository in my_project/.git/\n"
"Created username/my_project at my_project\n"
msgstr ""

#: ../../toolchain/moon/tutorial.md:32
msgid ""
"You may also specify the username and module name by using the `--user` "
"option and `--name` option respectively. If you have logged-in, the "
"username will default to your username."
msgstr "你也可以通过使用 `--user` 选项和 `--name` 选项分别指定用户名和模块名称。如果你已经登录，用户名将默认为你的用户名。"

#: ../../toolchain/moon/tutorial.md:35
msgid "Understanding the Module Directory Structure"
msgstr "理解模块目录结构"

#: ../../toolchain/moon/tutorial.md:37
msgid ""
"After creating the new module, your directory structure should resemble "
"the following:"
msgstr "创建新模块后，你的目录结构应该如下："

#: ../../toolchain/moon/tutorial.md:39
msgid ""
"my_project\n"
"├── Agents.md\n"
"├── cmd\n"
"│   └── main\n"
"│       ├── main.mbt\n"
"│       └── moon.pkg.json\n"
"├── LICENSE\n"
"├── moon.mod.json\n"
"├── moon.pkg.json\n"
"├── my_project_test.mbt\n"
"├── my_project.mbt\n"
"├── README.mbt.md\n"
"└── README.md -> README.mbt.md\n"
msgstr ""

#: ../../toolchain/moon/tutorial.md:56
msgid ""
"On Windows system, you need administrator priviledge or the developer "
"mode enabled to create the symbolic link."
msgstr "在 Windows 系统上，你需要管理员权限或启用开发者模式才能创建符号链接。"

#: ../../toolchain/moon/tutorial.md:59
msgid "Here's a brief explanation of the directory structure:"
msgstr "以下是目录结构的简要说明："

#: ../../toolchain/moon/tutorial.md:61
msgid ""
"`moon.mod.json` is used to identify a directory as a MoonBit module. It "
"contains the module's metadata, such as the module name, version, etc."
msgstr "`moon.mod.json` 用于标识目录为 MoonBit 模块。它包含模块的元数据，如模块名称、版本等。"

#: ../../toolchain/moon/tutorial.md:63
msgid ""
"{\n"
"  \"name\": \"username/my_project\",\n"
"  \"version\": \"0.1.0\",\n"
"  \"readme\": \"README.md\",\n"
"  \"repository\": \"\",\n"
"  \"license\": \"Apache-2.0\",\n"
"  \"keywords\": [],\n"
"  \"description\": \"\"\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/tutorial.md:75
msgid ""
"`.` and `cmd/main` directories: These are the packages within the module."
" Each package can contain multiple `.mbt` files, which are the source "
"code files for the MoonBit language. However, regardless of how many "
"`.mbt` files a package has, they all share a common `moon.pkg.json` file."
" `*_test.mbt` are separate test files in the package, these files are for"
" blackbox test, so private members of the same package cannot be accessed"
" directly."
msgstr ""
"`.` 和 `cmd/main` 目录：这些是模块中的包。每个包可以包含多个 `.mbt` 文件，这些文件是 MoonBit "
"语言的源代码文件。但是，无论一个包有多少 `.mbt` 文件，它们都共享一个公共的 `moon.pkg.json` 文件。`*_test.mbt`"
" 是独立测试文件，这些文件用于黑盒测试，因此同一个包的私有成员不能直接访问。"

#: ../../toolchain/moon/tutorial.md:77
msgid ""
"`moon.pkg.json` is package descriptor. It defines the properties of the "
"package, such as whether it is the main package and the packages it "
"imports."
msgstr "`moon.pkg.json` 是包描述符。它定义了包的属性，例如它是否是 main 包以及它导入的包。"

#: ../../toolchain/moon/tutorial.md:79
msgid "`cmd/main/moon.pkg.json`:"
msgstr ""

#: ../../toolchain/moon/tutorial.md:81 ../../toolchain/moon/tutorial.md:169
msgid ""
"{\n"
"  \"is-main\": true,\n"
"  \"import\": [\n"
"    {\n"
"      \"path\": \"username/my_project\",\n"
"      \"alias\": \"lib\"\n"
"    }\n"
"  ]\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/tutorial.md:93
msgid ""
"Here, `\"is-main: true\"` declares that the package contains an entry for"
" the `moon run` command."
msgstr "这里，`\"is_main: true\"` 声明该包包含 `moon run `指令的入口。"

#: ../../toolchain/moon/tutorial.md:95
msgid "`moon.pkg.json`:"
msgstr ""

#: ../../toolchain/moon/tutorial.md:97
msgid "{}\n"
msgstr ""

#: ../../toolchain/moon/tutorial.md:101
msgid ""
"This file is empty. Its purpose is simply to inform the build system that"
" this folder is a package."
msgstr "此文件为空。它的目的只是告诉构建系统这个文件夹是一个包。"

#: ../../toolchain/moon/tutorial.md:103
msgid ""
"`README.mbt.md` is the README file. The code blocks written inside will "
"be type checked and tested by `moon check` and `moon test`."
msgstr ""
"`README.mbt.md` 是 README 文件。内部编写的代码块将通过 `moon check` 和 `moon test` "
"进行类型检查和测试。"

#: ../../toolchain/moon/tutorial.md:105
msgid "Working with Packages"
msgstr "使用包"

#: ../../toolchain/moon/tutorial.md:107
msgid ""
"Our `username/my_project` module contains two packages: "
"`username/my_project` and `username/my_project/cmd/main`."
msgstr ""
"我们的 `username/my_project` 模块包含两个包：`username/my_project` 和 "
"`username/my_project/cmd/main`。"

#: ../../toolchain/moon/tutorial.md:109
msgid ""
"The `username/my_project` package contains `my_project.mbt` and "
"`my_project_test.mbt` files:"
msgstr "`username/my_project` 包包含 `my_project.mbt` 和 `my_project_test.mbt` 文件："

#: ../../toolchain/moon/tutorial.md:112
msgid "my_project.mbt"
msgstr ""

#: ../../toolchain/moon/tutorial.md:112
msgid ""
"///|\n"
"pub fn fib(n : Int) -> Int64 {\n"
"  for i = 0, a = 0L, b = 1L; i < n; i = i + 1, a = b, b = a + b {\n"
"\n"
"  } else {\n"
"    b\n"
"  }\n"
"}"
msgstr ""

#: ../../toolchain/moon/tutorial.md:124
msgid "my_project_test.mbt"
msgstr ""

#: ../../toolchain/moon/tutorial.md:124
msgid ""
"///|\n"
"test \"fib\" {\n"
"  let array = [1, 2, 3, 4, 5].map(fib(_))\n"
"\n"
"  // `inspect` is used to check the output of the function\n"
"  // Just write `inspect(value)` and execute `moon test --update`\n"
"  // to update the expected output, and verify them afterwards\n"
"  inspect(array, content=\"[1, 2, 3, 5, 8]\")\n"
"}"
msgstr ""

#: ../../toolchain/moon/tutorial.md:138
msgid "The generated file name will depend on the package name."
msgstr "生成的文件名取决于包名。"

#: ../../toolchain/moon/tutorial.md:141
msgid "The `username/my_project/cmd/main` package contains a `main.mbt` file:"
msgstr "`username/my_project/cmd/main` 包包含一个 `main.mbt` 文件："

#: ../../toolchain/moon/tutorial.md:143
msgid ""
"///|\n"
"fn main {\n"
"  println(@lib.fib(10))\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/tutorial.md:150
msgid ""
"To execute the program, specify the file system's path to the "
"`username/my_project/cmd/main` package in the `moon run` command:"
msgstr "要执行程序，在 `moon run` 命令中指定文件系统路径到 `username/my_project/cmd/main` 包："

#: ../../toolchain/moon/tutorial.md:152
msgid ""
"$ moon run cmd/main\n"
"89\n"
msgstr ""

#: ../../toolchain/moon/tutorial.md:157
msgid "You can test using the `moon test` command:"
msgstr "你可以使用 `moon test` 命令进行测试："

#: ../../toolchain/moon/tutorial.md:159
msgid ""
"$ moon test\n"
"Total tests: 1, passed: 1, failed: 0.\n"
msgstr ""

#: ../../toolchain/moon/tutorial.md:164
msgid "Package Importing"
msgstr "包导入"

#: ../../toolchain/moon/tutorial.md:166
msgid ""
"In the MoonBit's build system, the dependency is declared at the package "
"level. To import the `username/my_project` package in "
"`username/my_project/cmd/main`, you need to specify it in "
"`cmd/main/moon.pkg.json`:"
msgstr ""
"在 MoonBit 的构建系统中，模块的依赖被定义在包级别。要在 `username/my_project/cmd/main` 中导入 "
"`username/my_project` 包，你需要在 `cmd/main/moon.pkg.json` 中指定："

#: ../../toolchain/moon/tutorial.md:181
msgid ""
"Here, `\"username/my_project` specifies importing the root package and "
"having an alias of `lib`, so you can use `@lib.fib(10)` in "
"`cmd/main/main.mbt`."
msgstr ""
"这里，`username/my_project` 指定从 `username/my_project` 模块导入 "
"`username/my_project` 包，并且有别名 `lib`，所以你可以在 `cmd/main/main.mbt` 中使用 "
"`@lib.fib(10)`。"

#: ../../toolchain/moon/tutorial.md:183
msgid "Creating and Using a New Package"
msgstr "创建和使用新包"

#: ../../toolchain/moon/tutorial.md:185
msgid "First, create a new directory named `fib` under `lib`:"
msgstr "首先，在 `lib` 下创建一个名为 `fib` 的新目录："

#: ../../toolchain/moon/tutorial.md:187
msgid "mkdir fib\n"
msgstr ""

#: ../../toolchain/moon/tutorial.md:191
msgid "Now, you can create new files under `fib`:"
msgstr "现在，你可以在 `fib` 下创建新文件："

#: ../../toolchain/moon/tutorial.md:193
msgid "slow.mbt"
msgstr ""

#: ../../toolchain/moon/tutorial.md:193
msgid ""
"pub fn fib_slow(n : Int) -> Int {\n"
"  match n {\n"
"    0 => 0\n"
"    1 => 1\n"
"    _ => fib_slow(n - 1) + fib_slow(n - 2)\n"
"  }\n"
"}"
msgstr ""

#: ../../toolchain/moon/tutorial.md:204
msgid "fast.mbt"
msgstr ""

#: ../../toolchain/moon/tutorial.md:204
msgid ""
"pub fn fib_fast(num : Int) -> Int {\n"
"  fn aux(n, acc1, acc2) {\n"
"    match n {\n"
"      0 => acc1\n"
"      1 => acc2\n"
"      _ => aux(n - 1, acc2, acc1 + acc2)\n"
"    }\n"
"  }\n"
"\n"
"  aux(num, 0, 1)\n"
"}"
msgstr ""

#: ../../toolchain/moon/tutorial.md:219
msgid "moon.pkg.json"
msgstr ""

#: ../../toolchain/moon/tutorial.md:219
msgid "{}"
msgstr ""

#: ../../toolchain/moon/tutorial.md:224
msgid ""
"After creating these files, your directory structure should look like "
"this:"
msgstr "在创建这些文件后，你的目录结构应该如下："

#: ../../toolchain/moon/tutorial.md:226
msgid ""
".\n"
"├── Agents.md\n"
"├── cmd\n"
"│   └── main\n"
"│       ├── main.mbt\n"
"│       └── moon.pkg.json\n"
"├── fib\n"
"│   ├── fast.mbt\n"
"│   ├── moon.pkg.json\n"
"│   └── slow.mbt\n"
"├── LICENSE\n"
"├── moon.mod.json\n"
"├── moon.pkg.json\n"
"├── my_project_test.mbt\n"
"├── my_project.mbt\n"
"├── README.mbt.md\n"
"└── README.md -> README.mbt.md\n"
msgstr ""

#: ../../toolchain/moon/tutorial.md:246
msgid ""
"In the `cmd/main/moon.pkg.json` file, import the "
"`username/my_project/fib` package and customize its alias to "
"`my_awesome_fibonacci`:"
msgstr ""
"在 `cmd/main/moon.pkg.json` 文件中，导入 `username/my_project/fib` 包并将其别名定制为 "
"`my_awesome_fibonacci`："

#: ../../toolchain/moon/tutorial.md:248
msgid ""
"{\n"
"  \"is_main\": true,\n"
"  \"import\": [\n"
"    {\n"
"      \"path\": \"username/my_project/fib\",\n"
"      \"alias\": \"my_awesome_fibonacci\"\n"
"    }\n"
"  ]\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/tutorial.md:260
msgid ""
"This imports the `fib` package. After doing this, you can use the `fib` "
"package in `cmd/main/main.mbt`. Replace the file content of "
"`cmd/main/main.mbt` to:"
msgstr ""
"这一行导入了 `fib` 包，它是 `username/my_project` 模块中 `fib` 包的一部分。在这样做之后，你可以在 "
"`cmd/main/main.mbt` 中使用 `fib` 包。"

#: ../../toolchain/moon/tutorial.md:262
msgid ""
"fn main {\n"
"  let a = @my_awesome_fibonacci.fib_slow(10)\n"
"  let b = @my_awesome_fibonacci.fib_fast(11)\n"
"  println(\"fib(10) = \\{a}, fib(11) = \\{b}\")\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/tutorial.md:270
msgid "To execute your program, specify the path to the `main` package:"
msgstr "为了执行你的程序，指定 main 包的路径："

#: ../../toolchain/moon/tutorial.md:272
msgid ""
"$ moon run cmd/main\n"
"fib(10) = 55, fib(11) = 89\n"
msgstr ""

#: ../../toolchain/moon/tutorial.md:277
msgid "Adding Tests"
msgstr "添加测试"

#: ../../toolchain/moon/tutorial.md:279
msgid ""
"Let's add some tests to verify our fib implementation. Add the following "
"content in `fib/fib_test.mbt`:"
msgstr "让我们添加一些测试来验证我们的 fib 实现。在 `fib/fib_test.mbt` 中添加以下内容："

#: ../../toolchain/moon/tutorial.md:281
msgid ""
"test {\n"
"  inspect(fib_slow(0))\n"
"  inspect(fib_slow(1))\n"
"  inspect(fib_slow(2))\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/tutorial.md:289
msgid ""
"This code tests the first three terms of the Fibonacci sequence. `test { "
"... }` defines an inline test block. The code inside an inline test block"
" is executed in test mode."
msgstr "这段代码测试斐波那契数列的前三项。`test { ... }` 定义了一个内联测试块。内联测试块中的代码在测试模式下执行。"

#: ../../toolchain/moon/tutorial.md:291
msgid ""
"Inline test blocks are discarded in non-test compilation modes (`moon "
"build` and `moon run`), so they won't cause the generated code size to "
"bloat."
msgstr "内联测试块在非测试编译模式（`moon build` 和 `moon run`）中被丢弃，因此它们不会导致生成的代码大小膨胀。"

#: ../../toolchain/moon/tutorial.md:293
msgid ""
"Here we are using the snapshot test. Execute `moon test --update`, and "
"the file should be changed to:"
msgstr "这里我们使用了快照测试。执行 `moon test --update`，文件应该被更改为："

#: ../../toolchain/moon/tutorial.md:295
msgid ""
"test {\n"
"  inspect(@fib.fib_slow(0), content=\"0\")\n"
"  inspect(@fib.fib_slow(1), content=\"1\")\n"
"  inspect(@fib.fib_slow(2), content=\"1\")\n"
"}\n"
msgstr ""

#: ../../toolchain/moon/tutorial.md:303
msgid ""
"Notice that the test code uses `@fib` to refer to the `fib` package. The "
"build system automatically creates a new package for blackbox tests by "
"using the files that end with `_test.mbt`."
msgstr "注意，测试代码使用 `@fib` 来引用 `fib` 包。构建系统通过使用以 `_test.mbt` 结尾的文件自动为黑盒测试创建一个新包。"

#: ../../toolchain/moon/tutorial.md:305
msgid ""
"Finally, reuse the `moon test` command, which scans the entire project, "
"identifies, and runs all the tests. If everything is normal, you will "
"see:"
msgstr "最后，使用 `moon test` 命令，它会扫描整个项目，识别并运行所有测试。如果一切正常，你将看到："

#: ../../toolchain/moon/tutorial.md:308
msgid ""
"$ moon test\n"
"Total tests: 2, passed: 2, failed: 0.\n"
msgstr ""

#: ../../toolchain/vscode/index.md:1
msgid "MoonBit VSCode Plugin"
msgstr "MoonBit VSCode 插件"

#: ../../toolchain/vscode/index.md:3
msgid ""
"MoonBit provides a plugin for Visual Studio Code, available in the "
"[Visual Studio "
"MarketPlace](https://marketplace.visualstudio.com/items?itemName=moonbit"
".moonbit-lang) and [Open VSX Registry](https://open-"
"vsx.org/extension/moonbit/moonbit-lang)."
msgstr ""
"MoonBit 为 Visual Studio Code 提供了一个插件，可以在 [Visual Studio "
"市场](https://marketplace.visualstudio.com/items?itemName=moonbit.moonbit-"
"lang) 和 [Open VSX 仓库](https://open-vsx.org/extension/moonbit/moonbit-"
"lang) 中找到。"

#: ../../toolchain/vscode/index.md:7
msgid "Commands"
msgstr "命令"

#: ../../toolchain/vscode/index.md:9
msgid ""
"The plugin provides several commands, available through [command "
"palettes](https://code.visualstudio.com/docs/getstarted/userinterface"
"#_command-palette)"
msgstr ""
"该插件提供了几个命令，可以通过 "
"[命令面板](https://code.visualstudio.com/docs/getstarted/userinterface"
"#_command-palette) 访问"

#: ../../toolchain/vscode/index.md:12
msgid "Select backend: It allows you to switch between several backends"
msgstr "选择后端：它允许你在多个后端之间切换"

#: ../../toolchain/vscode/index.md:13
msgid ""
"Restart MoonBit language server: It allows you to restart the language "
"server, in case it's unresponsive or has some stale state."
msgstr "重启 MoonBit 语言服务器：它允许你重启语言服务器，以防它无响应或有一些过时的状态。"

#: ../../toolchain/vscode/index.md:15
msgid ""
"Install MoonBit toolchain: Manually triggers the installation process. "
"The extension will check if the installed MoonBit toolchain matches the "
"extension's version."
msgstr "安装 MoonBit 工具链：手动触发安装过程。该扩展将检查已安装的 MoonBit 工具链是否与扩展的版本匹配。"

#: ../../toolchain/vscode/index.md:18
msgid ""
"Get lsp's compiler version: It will display the MoonBit compiler version "
"used by the extension."
msgstr "获取 LSP 的编译器版本：它将显示扩展使用的 MoonBit 编译器版本。"

#: ../../toolchain/vscode/index.md:20
msgid ""
"Toggle multiline string: It can help switching the chosen text between a "
"plain text and the MoonBit's [multiline string "
"syntax](/language/fundamentals.md#string)"
msgstr ""
"切换多行字符串：它可以帮助在纯文本和 MoonBit 的 [多行字符串语法](/language/fundamentals.md#string) "
"之间切换所选文本"

#: ../../toolchain/vscode/index.md:24
msgid "Actions"
msgstr "操作"

#: ../../toolchain/vscode/index.md:26
msgid ""
"The plugin also provides several actions, available through [quick "
"fix](https://code.visualstudio.com/docs/editing/refactoring#_code-"
"actions-quick-fixes-and-refactorings)"
msgstr ""
"该插件还提供了几个操作，可以通过 "
"[快速修复](https://code.visualstudio.com/docs/editing/refactoring#_code-"
"actions-quick-fixes-and-refactorings) 访问"

#: ../../toolchain/vscode/index.md:29
msgid ""
"Add missing arms: It allows you to fill up the branches of a `match` "
"expression when encountering [Error 0011](/language/error_codes/E0011.md)"
msgstr ""
"添加缺失的分支：当遇到 [错误 0011](/language/error_codes/E0011.md) 时，它允许你填充 `match` "
"表达式的分支"

#: ../../toolchain/vscode/index.md:32
msgid "Code Lens"
msgstr "代码透镜"

#: ../../toolchain/vscode/index.md:34
msgid ""
"The plugin provides code lens for each top-level code block, especially "
"test blocks."
msgstr "该插件为每个顶级代码块，特别是测试块，提供代码透镜。"

#: ../../toolchain/vscode/index.md:37
msgid "The provided functionalities are:"
msgstr "提供的功能包括："

#: ../../toolchain/vscode/index.md:39
msgid "Format: format the code block"
msgstr "格式化：格式化代码块"

#: ../../toolchain/vscode/index.md:40
msgid "Test / Bench: test or bench the test block"
msgstr "测试 / 基准：测试或基准测试代码块"

#: ../../toolchain/vscode/index.md:41
msgid "Debug (JavaScript backend only): test the test block with debugger"
msgstr "调试（仅限 JavaScript 后端）：使用调试器测试测试块"

#: ../../toolchain/vscode/index.md:42
msgid ""
"Update: update the [snapshot tests](/language/tests.md#snapshot-tests) in"
" the code block"
msgstr "更新：更新代码块中的 [快照测试](/language/tests.md#snapshot-tests)"

#: ../../toolchain/vscode/index.md:44
msgid ""
"Trace: turn on/off the tracing of the test block where each assignment "
"will have the value rendered next to it"
msgstr "跟踪：打开/关闭测试块的跟踪，其中每个赋值将在其旁边呈现值"

#: ../../toolchain/wasm/component-model-tutorial.md:1
msgid "MoonBit for Component Model"
msgstr "MoonBit 与组件模型"

#: ../../toolchain/wasm/component-model-tutorial.md:3
msgid ""
"This guide demonstrates how to build WebAssembly components using "
"MoonBit, leveraging WIT (WebAssembly Interface Types) for interface "
"definitions and the `wit-bindgen` toolchain for code generation."
msgstr ""
"本指南演示了如何使用 MoonBit 构建 WebAssembly 组件，利用 WIT（WebAssembly 接口类型）进行接口定义，并使用 "
"`wit-bindgen` 工具链进行代码生成。"

#: ../../toolchain/wasm/component-model-tutorial.md:7
msgid ""
"This tutorial walks through building a component that implements the "
"[`adder` world][adder-wit] defined in the `docs:adder` package. The "
"component will export an `add` interface containing an `add` function "
"that sums two numbers."
msgstr ""
"本教程将演示如何构建一个实现 `docs:adder` 包中定义的 [`adder` world][adder-wit] "
"的组件。该组件将导出一个包含两个数字求和的 `add` 函数的 `add` 接口。"

#: ../../toolchain/wasm/component-model-tutorial.md:14
msgid "1. Install the Tools"
msgstr "1. 安装工具"

#: ../../toolchain/wasm/component-model-tutorial.md:16
msgid "Installing MoonBit"
msgstr "安装 MoonBit"

#: ../../toolchain/wasm/component-model-tutorial.md:18
msgid ""
"First, install the MoonBit compiler and toolchain. Follow the "
"installation instructions from the [MoonBit download "
"page](https://www.moonbitlang.com/download)."
msgstr ""
"首先，安装 MoonBit 编译器和工具链。请按照 [MoonBit "
"下载页面](https://www.moonbitlang.cn/download) 的说明进行操作。"

#: ../../toolchain/wasm/component-model-tutorial.md:22
msgid ""
"Verify your MoonBit installation (below are the versions at the time of "
"writing):"
msgstr "验证你的 MoonBit 安装（以下是撰写本文时的版本）："

#: ../../toolchain/wasm/component-model-tutorial.md:25
msgid ""
"$ moon version --all\n"
"moon 0.1.20250826 (8ab6c9e 2025-08-26) ~/.moon/bin/moon\n"
"moonc v0.6.25+d6913262c (2025-08-27) ~/.moon/bin/moonc\n"
"moonrun 0.1.20250826 (8ab6c9e 2025-08-26) ~/.moon/bin/moonrun\n"
"moon-pilot 0.0.1-95f12db ~/.moon/bin/moon-pilot\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:33
msgid "Installing Wasm toolchain"
msgstr "安装 Wasm 工具链"

#: ../../toolchain/wasm/component-model-tutorial.md:35
msgid ""
"Install the `wit-bindgen` CLI tool, which generates MoonBit bindings from"
" WIT files:"
msgstr "安装 `wit-bindgen` CLI 工具，它可以从 WIT 文件生成 MoonBit 绑定："

#: ../../toolchain/wasm/component-model-tutorial.md:38
msgid "$ cargo install wit-bindgen-cli\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:42
msgid "Install `wasm-tools` for working with WebAssembly components:"
msgstr "为了使用 WebAssembly 组件，安装 `wasm-tools`："

#: ../../toolchain/wasm/component-model-tutorial.md:44
msgid "$ cargo install wasm-tools\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:48
msgid "Verify the installations (below are the versions at the time of writing):"
msgstr "验证安装（以下是撰写本文时的版本）："

#: ../../toolchain/wasm/component-model-tutorial.md:50
msgid ""
"$ wit-bindgen --version\n"
"wit-bindgen-cli 0.45.0\n"
"$ wasm-tools --version\n"
"wasm-tools 1.238.0\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:57
msgid "2. Define the Interface (WIT)"
msgstr "2. 定义接口（WIT）"

#: ../../toolchain/wasm/component-model-tutorial.md:59
msgid ""
"Before generating the MoonBit project, you need to define the component "
"interface using WIT. Create a directory for your project and define the "
"WIT file:"
msgstr "在生成 MoonBit 项目之前，你需要使用 WIT 定义组件接口。为你的项目创建一个目录并定义 WIT 文件："

#: ../../toolchain/wasm/component-model-tutorial.md:63
msgid ""
"$ mkdir moonbit-adder && cd moonbit-adder\n"
"$ mkdir wit\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:68
msgid "Create `wit/world.wit` with the following content:"
msgstr "创建 `wit/world.wit`，内容如下："

#: ../../toolchain/wasm/component-model-tutorial.md:70
msgid ""
"package docs:adder@0.1.0;\n"
"\n"
"interface add {\n"
"    add: func(x: u32, y: u32) -> u32;\n"
"}\n"
"\n"
"world adder {\n"
"    export add;\n"
"}\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:82
msgid "This WIT definition:"
msgstr "此 WIT 定义："

#: ../../toolchain/wasm/component-model-tutorial.md:84
msgid "Declares a package `docs:adder` with version `0.1.0`"
msgstr "声明一个包 `docs:adder`，版本为 `0.1.0`"

#: ../../toolchain/wasm/component-model-tutorial.md:85
msgid ""
"Defines an `add` interface with a single function that takes two `u32` "
"parameters and returns a `u32`"
msgstr "定义一个 `add` 接口，包含一个接受两个 `u32` 参数并返回一个 `u32` 的函数"

#: ../../toolchain/wasm/component-model-tutorial.md:87
msgid "Creates an `adder` world that exports the `add` interface"
msgstr "创建一个 `adder` 世界，导出 `add` 接口"

#: ../../toolchain/wasm/component-model-tutorial.md:89
msgid "3. Generate MoonBit Project Structure"
msgstr "3. 生成 MoonBit 项目结构"

#: ../../toolchain/wasm/component-model-tutorial.md:91
msgid "Use `wit-bindgen` to generate the MoonBit project structure and bindings:"
msgstr "使用 `wit-bindgen` 生成 MoonBit 项目结构和绑定："

#: ../../toolchain/wasm/component-model-tutorial.md:93
msgid ""
"$ wit-bindgen moonbit wit/world.wit --out-dir . \\\n"
"    --derive-eq \\\n"
"    --derive-show \\\n"
"    --derive-error\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:100
msgid "This command generates the following directory structure:"
msgstr "此命令生成以下目录结构："

#: ../../toolchain/wasm/component-model-tutorial.md:102
msgid ""
".\n"
"├── ffi\n"
"│   ├── moon.pkg.json\n"
"│   └── top.mbt\n"
"├── gen\n"
"│   ├── ffi.mbt\n"
"│   ├── gen_interface_docs_adder_add_export.mbt\n"
"│   ├── interface\n"
"│   │   └── docs\n"
"│   │       └── adder\n"
"│   │           └── add\n"
"│   │               ├── moon.pkg.json\n"
"│   │               ├── stub.mbt\n"
"│   │               └── top.mbt\n"
"│   ├── moon.pkg.json\n"
"│   ├── world\n"
"│   │   └── adder\n"
"│   │       ├── moon.pkg.json\n"
"│   │       └── stub.mbt\n"
"│   └── world_adder_export.mbt\n"
"├── moon.mod.json\n"
"├── wit\n"
"│   └── world.wit\n"
"└── world\n"
"    └── adder\n"
"        ├── ffi_import.mbt\n"
"        ├── import.mbt\n"
"        ├── moon.pkg.json\n"
"        └── top.mbt\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:134
msgid "The generated files include:"
msgstr "生成的文件包括："

#: ../../toolchain/wasm/component-model-tutorial.md:136
msgid "`moon.mod.json`: MoonBit module configuration"
msgstr "`moon.mod.json`: MoonBit 模块配置"

#: ../../toolchain/wasm/component-model-tutorial.md:137
msgid "`gen/`: Generated export bindings"
msgstr "`gen/`: 生成的导出绑定"

#: ../../toolchain/wasm/component-model-tutorial.md:138
msgid "`interface/`: Generated export interface bindings"
msgstr "`interface/`: 生成的导出接口绑定"

#: ../../toolchain/wasm/component-model-tutorial.md:139
msgid "`world/`: Generated export world bindings"
msgstr "`world/`: 生成的导出世界绑定"

#: ../../toolchain/wasm/component-model-tutorial.md:140
msgid "`stub.mbt`: Main implementation file"
msgstr "`stub.mbt`: 主实现文件"

#: ../../toolchain/wasm/component-model-tutorial.md:141
msgid "`interface/`: Generated import interface bindings"
msgstr "`interface/`: 生成的导入接口绑定"

#: ../../toolchain/wasm/component-model-tutorial.md:142
msgid "`world/`: Generated import world bindings"
msgstr "`world/`: 生成的导入世界绑定"

#: ../../toolchain/wasm/component-model-tutorial.md:144
msgid "4. Examine the Generated Code"
msgstr "4. 检查生成的代码"

#: ../../toolchain/wasm/component-model-tutorial.md:146
msgid ""
"The `wit-bindgen` tool generates MoonBit bindings that handle the "
"WebAssembly component interface. Let's examine the generated "
"`gen/interface/docs/adder/add/stub.mbt`:"
msgstr ""
"`wit-bindgen` 工具生成了处理 WebAssembly 组件接口的 MoonBit 绑定。让我们检查生成的 "
"`gen/interface/docs/adder/add/stub.mbt`："

#: ../../toolchain/wasm/component-model-tutorial.md:150
msgid ""
"// Generated by `wit-bindgen` 0.45.0.\n"
"\n"
"pub fn add(_x : UInt, _y : UInt) -> UInt {\n"
"      ...\n"
"}\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:158
msgid ""
"The `...` is the placeholder syntax in MoonBit. When executing `moon "
"check --target wasm`, 'unfinished code' warnings will appear."
msgstr "`...` 是 MoonBit 中的占位符语法。当执行 `moon check --target wasm` 时，会出现“未完成代码”警告。"

#: ../../toolchain/wasm/component-model-tutorial.md:161
msgid "5. Implement the Component Logic"
msgstr "5. 实现组件逻辑"

#: ../../toolchain/wasm/component-model-tutorial.md:163
msgid ""
"Now implement the `add` function in "
"`gen/interface/docs/adder/add/stub.mbt`:"
msgstr "现在在 `gen/interface/docs/adder/add/stub.mbt` 中实现 `add` 函数："

#: ../../toolchain/wasm/component-model-tutorial.md:165
msgid ""
"// Generated by `wit-bindgen` 0.45.0.\n"
"\n"
"///|\n"
"pub fn add(x : UInt, y : UInt) -> UInt {\n"
"  x + y\n"
"}\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:174
msgid "6. Configure the Build"
msgstr "6. 配置构建"

#: ../../toolchain/wasm/component-model-tutorial.md:176
msgid ""
"Ensure your `gen/moon.pkg.json` is properly configured for WebAssembly "
"target:"
msgstr "确保你的 `gen/moon.pkg.json` 已正确配置为 WebAssembly 目标："

#: ../../toolchain/wasm/component-model-tutorial.md:178
msgid ""
"{\n"
"  // link configuration for Wasm backend\n"
"  \"link\": {\n"
"    \"wasm\": {\n"
"      \"exports\": [\n"
"        // Export for cabi_realloc\n"
"        \"cabi_realloc:cabi_realloc\",\n"
"        // Export per the interface definition\n"
"        \"wasmExportAdd:docs:adder/add@0.1.0#add\"\n"
"      ],\n"
"      \"export-memory-name\": \"memory\",\n"
"      \"heap-start-address\": 16\n"
"    }\n"
"  },\n"
"  \"import\": [\n"
"    {\n"
"      \"path\": \"docs/adder/ffi\",\n"
"      \"alias\": \"ffi\"\n"
"    },\n"
"    {\n"
"      \"path\": \"docs/adder/gen/interface/docs/adder/add\",\n"
"      \"alias\": \"add\"\n"
"    }\n"
"  ]\n"
"}\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:206
msgid "7. Build the WebAssembly Component"
msgstr "7. 构建 WebAssembly 组件"

#: ../../toolchain/wasm/component-model-tutorial.md:208
msgid "Build the MoonBit code to WebAssembly:"
msgstr "将 MoonBit 代码构建为 WebAssembly："

#: ../../toolchain/wasm/component-model-tutorial.md:210
msgid "$ moon build --target wasm\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:214
msgid ""
"This generates a WebAssembly module. To create a proper WebAssembly "
"component, use `wasm-tools`:"
msgstr "这将生成一个 WebAssembly 模块。为了创建一个合适的 WebAssembly 组件，使用 `wasm-tools`："

#: ../../toolchain/wasm/component-model-tutorial.md:217
msgid ""
"$ wasm-tools component embed wit target/wasm/release/build/gen/gen.wasm "
"\\\n"
"    --encoding utf16 \\\n"
"    --output adder.wasm\n"
"$ wasm-tools component new adder.wasm --output adder.component.wasm\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:224
msgid "You can verify the component's interface using `wasm-tools`:"
msgstr "你可以使用 `wasm-tools` 验证组件的接口："

#: ../../toolchain/wasm/component-model-tutorial.md:226
msgid "$ wasm-tools component wit adder.component.wasm\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:230
msgid "Expected output for both commands:"
msgstr "期待的两个命令输出："

#: ../../toolchain/wasm/component-model-tutorial.md:232
msgid ""
"package root:component;\n"
"\n"
"world root {\n"
"  export docs:adder/add@0.1.0;\n"
"}\n"
"package docs:adder@0.1.0 {\n"
"  interface add {\n"
"    add: func(x: u32, y: u32) -> u32;\n"
"  }\n"
"}\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:245
msgid "8. Testing the Component"
msgstr "8. 测试组件"

#: ../../toolchain/wasm/component-model-tutorial.md:247
msgid "Using the Example Host"
msgstr "使用示例宿主"

#: ../../toolchain/wasm/component-model-tutorial.md:249
msgid ""
"To test your component, use the [`example-host`][example-host] provided "
"in this repository:"
msgstr "要测试你的组件，请使用本存储库中提供的 [`example-host`][example-host]："

#: ../../toolchain/wasm/component-model-tutorial.md:252
msgid ""
"$ git clone https://github.com/bytecodealliance/component-docs.git\n"
"$ cd component-docs/component-model/examples/example-host\n"
"$ cp /path/to/adder.component.wasm .\n"
"$ cargo run --release -- 5 3 adder.component.wasm\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:259
msgid "Expected output:"
msgstr "期待的输出："

#: ../../toolchain/wasm/component-model-tutorial.md:261
msgid "5 + 3 = 8\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:267
msgid "Using Wasmtime"
msgstr "使用 Wasmtime"

#: ../../toolchain/wasm/component-model-tutorial.md:269
msgid "You can also test the component directly with `wasmtime`:"
msgstr "你也可以直接使用 `wasmtime` 测试组件："

#: ../../toolchain/wasm/component-model-tutorial.md:271
msgid ""
"$ wasmtime run --invoke 'add(10, 20)' adder.component.wasm\n"
"30\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:276
msgid "9. Configurations"
msgstr "9. 配置"

#: ../../toolchain/wasm/component-model-tutorial.md:278
msgid "--derive-eq --derive-show"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:280
msgid ""
"These two options will add `derive(Eq)` and / or `derive(Show)` for all "
"the generated types."
msgstr "这两个选项将为所有生成的类型添加 `derive(Eq)` 和 / 或 `derive(Show)`。"

#: ../../toolchain/wasm/component-model-tutorial.md:283
msgid "--derive-error"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:285
msgid ""
"This option will generate variants / enums whose names containing 'Error'"
" as [suberrors](https://docs.moonbitlang.com/en/latest/language/error-"
"handling.html#error-types). This allows you to integrate the MoonBit's "
"error handling easier."
msgstr ""
"此选项将生成名称中包含“Error”的变体/枚举作为 "
"[suberrors](https://docs.moonbitlang.com/en/latest/language/error-"
"handling.html#error-types)。这使你能够更轻松地集成 MoonBit 的错误处理。"

#: ../../toolchain/wasm/component-model-tutorial.md:289
msgid "For example, for the following interface:"
msgstr "例如，对于以下接口："

#: ../../toolchain/wasm/component-model-tutorial.md:291
msgid ""
"package docs:adder@0.1.0;\n"
"\n"
"interface add {\n"
"    variant computation-error {\n"
"        overflow\n"
"    }\n"
"    add: func(x: u32, y: u32) -> result<u32, computation-error>;\n"
"}\n"
"\n"
"world adder {\n"
"    import add;\n"
"}\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:306
msgid "Will generate the following type and function:"
msgstr "将生成以下类型和函数："

#: ../../toolchain/wasm/component-model-tutorial.md:308
msgid ""
"// Generated by `wit-bindgen` 0.45.0. DO NOT EDIT!\n"
"\n"
"///|\n"
"pub(all) suberror ComputationError {\n"
"  Overflow\n"
"} derive(Show, Eq)\n"
"\n"
"///|\n"
"pub fn add(x : UInt, y : UInt) -> Result[UInt, ComputationError] {\n"
"  ...\n"
"}\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:322
msgid "which you may use it as:"
msgstr "你可以这样使用它："

#: ../../toolchain/wasm/component-model-tutorial.md:324
msgid ""
"// Generated by `wit-bindgen` 0.45.0.\n"
"\n"
"///|\n"
"fn init {\n"
"  let _ = @add.add(1, 2).unwrap_or_error() catch { Overflow => ... }\n"
"\n"
"}\n"
"\n"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:335
msgid "--ignore-stub"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:337
msgid ""
"It happens when you would like to regenerate the project due to the "
"updated interface, but you don't want the `stub` file to be touched. You "
"may use `--ignore-stub` option to avoid such modifications."
msgstr ""
"当你想要由于更新接口而重新生成项目时，但又不想修改 `stub` 文件时，就会发生这种情况。你可以使用 `--ignore-stub` "
"选项来避免这种修改。"

#: ../../toolchain/wasm/component-model-tutorial.md:341
msgid "--project-name"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:343
msgid ""
"By default, the project name is generated per the name defined in the "
"MoonBit file. You may use this option to specify the name of the project."
" It can also be used if you are generating the project as part of a "
"larger project."
msgstr ""
"默认情况下，项目名称是根据 MoonBit "
"文件中定义的名称生成的。你可以使用此选项来指定项目的名称。如果你正在将项目作为更大项目的一部分生成，它也可以使用。"

#: ../../toolchain/wasm/component-model-tutorial.md:347
msgid "--gen-dir"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:349
msgid ""
"By default, the exportation parts are generated under `gen`. You may use "
"this option to specify another directory."
msgstr "默认情况下，导出部分生成在 `gen` 下。你可以使用此选项指定另一个目录。"

#: ../../toolchain/wasm/component-model-tutorial.md:352
msgid "10. References and Further Reading"
msgstr "10. 参考文献和进一步阅读"

#: ../../toolchain/wasm/component-model-tutorial.md:354
msgid ""
"[WebAssembly Component Model](https://component-"
"model.bytecodealliance.org/)"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:355
msgid ""
"[Component Model Examples](https://github.com/bytecodealliance/component-"
"docs/tree/main/component-model/examples)"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:356
msgid ""
"[WIT Format Specification](https://component-"
"model.bytecodealliance.org/design/wit.html)"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:357
msgid "[`wit-bindgen`](https://github.com/bytecodealliance/wit-bindgen)"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:358
msgid "[WebAssembly Tools](https://github.com/bytecodealliance/wasm-tools)"
msgstr ""

#: ../../toolchain/wasm/component-model-tutorial.md:359
msgid "[Wasmtime Runtime](https://wasmtime.dev/)"
msgstr ""

#: ../../toolchain/wasm/index.md:1
msgid "WebAssembly Integration"
msgstr ""

#: ../../toolchain/wasm/index.md:3
msgid ""
"MoonBit is a programming language that provides first-class support for "
"WebAssembly."
msgstr "MoonBit 是一种提供对 WebAssembly 进行一流支持的编程语言。"

#: ../../toolchain/wasm/index.md:6
msgid "Component Model"
msgstr "组件模型"

#: ../../toolchain/wasm/index.md:8
msgid ""
"Check out [this tutorial](component-model-tutorial.md) on how to work "
"with [component model](https://component-model.bytecodealliance.org/) in "
"MoonBit."
msgstr ""
"查看 [本教程](component-model-tutorial.md) 了解如何在 MoonBit 中使用 [组件模型](https"
"://component-model.bytecodealliance.org/)。"

#: ../../toolchain/wasm/index.md:11
msgid "Custom Export and Import"
msgstr "自定义导出和导入"

#: ../../toolchain/wasm/index.md:13
msgid ""
"Check out [FFI](/language/ffi.md) section on how to import or export "
"functions."
msgstr "查看 [FFI](/language/ffi.md) 部分，了解如何导入或导出函数。"

#: ../../toolchain/wasm/index.md:15
msgid "Q&A"
msgstr "问答"

#: ../../toolchain/wasm/index.md:17
msgid "Q: What is `spectest.print_char`"
msgstr "问：什么是 `spectest.print_char`"

#: ../../toolchain/wasm/index.md:19
msgid ""
"A: It's how MoonBit prints. It prints a UTF-16 unicode code at a time. "
"For portability, avoid using `println`. If this does occur in the final "
"result, consider using [`wasm-"
"merge`](https://github.com/WebAssembly/binaryen) or similar tools."
msgstr ""
"A: 这是 MoonBit 打印的方式。它一次打印一个 UTF-16 Unicode 代码。为了可移植性，避免使用 "
"`println`。如果这确实出现在最终结果中，请考虑使用 [`wasm-"
"merge`](https://github.com/WebAssembly/binaryen) 或类似工具。"

